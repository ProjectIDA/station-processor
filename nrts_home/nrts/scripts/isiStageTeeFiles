#!/bin/csh -f
# $Id: isiStageTeeFiles,v 1.9 2006/04/08 03:55:16 dechavez Exp $
#
# Compress and move ISI tee files into ISO staging area

set debug  = 0
set myname = isiStageTeeFiles
set tmp1 = /tmp/$myname.tmp1.$$
set tmp2 = /tmp/$myname.tmp2.$$

if ($debug) logger -t $myname"[$$]" -p user.info "begin"

# General setup

set setup  = ~nrts/scripts/ScriptSetup
if (! -e $setup ) then
    set message = "missing $setup"
    logger -t $myname"[$$]" -p user.info "$message"
    echo "${myname}: $message"
    goto failure
endif
source $setup
if ($debug) logger -t $myname"[$$]" -p user.info "$setup OK"

# Make sure no other instance of this script is running

ps -ef | fgrep $myname | fgrep -v fgrep | fgrep -v $$ | fgrep -v "sh -c" > /dev/null
if ($status == 0) then
    if ($debug) logger -t $myname"[$$]" -p user.info "another instance already active"
    goto success
endif

# Command line setup

set error = 0
if ($#argv == 0) then
    set Force = 0
    set site = $DefaultSite
else if ($#argv == 1) then
    if ($argv[1] == "FORCE") then
        set Force = 1
        set site = $DefaultSite
    else
        set Force = 0
        set site = $argv[1]
    endif
else if ($#argv == 2) then
    if ($argv[1] == "FORCE") then
        set Force = 1
        set site = $argv[2]
    else if ($argv[2] == "FORCE") then
        set Force = 1
        set site = $argv[1]
    else
        set error = 1
    endif
else
    set error = 2
endif

if ($error) then
    set message = "bad command line, error $error"
    logger -t $myname"[$$]" -p user.info "$message"
    echo "${myname}: $message"
    echo "usage: $myname [ FORCE ] [ site ]"
    goto failure
endif

set StaName = `echo $site | ucase`

# Get the full path names

set SiteDir  = $NRTS_HOME/$site
set TeeDir   = $SiteDir/tee
set IsoDir   = $SiteDir/iso
set StopFlag = $TeeDir/STOP

# Nothing to do if there isn't a tee directory

if (! -d $TeeDir) then
    if ($debug) logger -t $myname"[$$]" -p user.info "no such tee dir $TeeDir"
    goto success
endif

# Nothing to do if the STOP flag is set in the tee directory

if (-e $StopFlag) then
    if ($debug) logger -t $myname"[$$]" -p user.info "quit: $site STOP flag set"
    goto success
endif

# Nothing to do if there isn't a iso directory

if (! -d $IsoDir) then
    if ($debug) logger -t $myname"[$$]" -p user.info "no such iso dir $IsoDir"
    goto success
endif

# Make sure ISO tree is complete

set StageDir = "$IsoDir/stage"
set DoneZips = "$IsoDir/done/gziped"
set DoneIsos = "$IsoDir/done/images"
set Config   = "$IsoDir/config"

set errors = 0
foreach dir ($StageDir $DoneZips $DoneIsos)
    if (! -d $dir) then
        set message = "Missing $dir"
        logger -t $myname"[$$]" -p user.info "$message"
        echo "${myname}: $message"
        set errors = 1
    endif
end

# Make required helper scripts exist

set isiCreateIsoImage = $NRTS_HOME/scripts/isiCreateIsoImage
set isiGenerateIsoLabel = $NRTS_HOME/scripts/isiGenerateIsoLabel
set isiIsoParameters = $IsoDir/config

foreach script ($isiCreateIsoImage $isiGenerateIsoLabel $isiIsoParameters)
    if (! -e $script) then
        set message = "Missing $script"
        logger -t $myname"[$$]" -p user.info "$message"
        echo "${myname}: $message"
        set errors = 1
    endif
end

set isiIsoNotify = $NRTS_HOME/scripts/isiIsoNotify

if ($errors != 0) goto failure

# Clean up old files

find $DoneZips -atime $DoneZipsFindValue -a -exec rm -f {} \;
find $DoneIsos -atime $DoneIsosFindValue -a -exec rm -f {} \;
find $IsoDir -name "*.iso" -mtime $IsoDirFindValue -a -exec rm -f {} \;

# PktRev, PktLen and DefaultMaxMbytes come from the config file

source $isiIsoParameters

# If forcing an ISO image, then do it now

if ($Force) then
    logger -t $myname"[$$]" -p user.info "FORCE $StaName $PktRev $PktLen"
    source $isiCreateIsoImage
    if ($debug) logger -t $myname"[$$]" -p user.info "isiCreateIsoImage status $status"
    if ($status != 0) goto failure
    set count = `ls $IsoDir | grep ".iso" | wc -l`
    echo "$count ISO images ready to burn"
    goto success
else
    @ MaxMBytesPerArchive = $DefaultMaxMbytes
    @ MaxBytesPerArchive = $MaxMBytesPerArchive * 1024 * 1024
    if ($debug) logger -t $myname"[$$]" -p user.info "begin ($MaxMBytesPerArchive $StaName $PktRev $PktLen)"
endif

# Compress all but the most recent uncompressed tee file

cd $TeeDir
ls 4??????????????????????? >& $tmp1

if ($status == 0) then
    set NumFiles = `cat $tmp1 | wc -l`
    if ($NumFiles <= 0) goto success
    @ NumFiles -= 1
    set UncompressedFileList = `head -$NumFiles $tmp1`

    # Compress each file in the list

    if ($debug) logger -t $myname"[$$]" -p user.info "compressing files in $TeeDir"
    if ($status == 0) then
        foreach file ($UncompressedFileList)
            set output = $file.gz
            rm -f $output
            set command = "gzip $file"
            if ($debug) logger -t $myname"[$$]" -p user.info "$command"
            $command
            if (-e $file && -e $output) then
                logger -t $myname"[$$]" -p user.info "$command failed"
                rm -f $output
                goto failure
            endif
        end
    endif
endif

# Move zipped files into the staging area, building ISO images as needed

StartOfLoop:

    @ BytesUsed  = `du -sk $StageDir | awk '{print $1}'`
    @ BytesUsed *= 1024 # convert from K-bytes to bytes
    if ($BytesUsed > $MaxBytesPerArchive) then
        logger -t $myname"[$$]" -p user.info "WARNING: $StageDir is too full"
        source $isiCreateIsoImage
        goto StartOfLoop
    endif
    @ AvailSpace = $MaxBytesPerArchive - $BytesUsed

    # Move these files into the iso stage 

    if ($debug) logger -t $myname"[$$]" -p user.info "staging files from $TeeDir to $StageDir"
    ls 4???????????????????????.gz >& $tmp2
    if ($status == 0) then
        set CompressedFileList = `cat $tmp2`
        foreach file ($CompressedFileList)
            @ FileSize = `wc -c $file | awk '{print $1}'`
            if ($FileSize > $AvailSpace) then
                logger -t $myname"[$$]" -p user.info "$StageDir is full"
                source $isiCreateIsoImage
                goto StartOfLoop
            else
                set destpath = `uniqpath suflen=3 $file $StageDir`
                set command = "mv $file $destpath"
                if ($debug) logger -t $myname"[$$]" -p user.info "$command"
                $command
                if ($status == 0) then
                    @ AvailSpace -= $FileSize
                    if ($AvailSpace <= 0) then
                        logger -t $myname"[$$]" -p user.info "$StageDir is full"
                        source $isiCreateIsoImage
                        goto StartOfLoop
                    endif
                else
                    logger -t $myname"[$$]" -p user.info "FAILED: $command"
                    goto failure
                endif
            endif
        end
    endif

# Normal exit

success:
rm -f $tmp1
rm -f $tmp2
pkill -HUP -x ispd
if ($debug) logger -t $myname"[$$]" -p user.info "completed OK"
exit 0

failure:
rm -f $tmp1
rm -f $tmp2
pkill -HUP -x ispd
logger -t $myname"[$$]" -p user.info "exit 1"
exit 1

# Revision History
#
# $Log: isiStageTeeFiles,v $
# Revision 1.9  2006/04/08 03:55:16  dechavez
# define tmp files at startup in case of very early exit
#
# Revision 1.8  2006/04/07 22:59:33  dechavez
# yet another rushed fix, now to deal with the case of no .gz files
#
# Revision 1.7  2006/04/07 22:29:19  dechavez
# remove tmp file (duh)
#
# Revision 1.6  2006/04/07 17:00:32  dechavez
# handle the case of one or more pre-existing .gz files
#
# Revision 1.5  2006/04/06 16:56:01  dechavez
# .nozip support
#
# Revision 1.4  2005/10/20 20:05:10  dechavez
# added debug tracer
#
# Revision 1.3  2005/10/12 00:21:01  dechavez
# fixed error counting number of images ready to burn after Force
#
# Revision 1.2  2005/10/11 18:18:37  dechavez
# fixed command line parsing
#
# Revision 1.1  2005/10/11 00:03:19  dechavez
# initial release
#
#
