#include "isitapdlg.h"

#include <qapplication.h>
#include <qvariant.h>
#include <qlabel.h>
#include <qcombobox.h>
#include <qgroupbox.h>
#include <qtable.h>
#include <qpushbutton.h>
#include <qlineedit.h>
#include <qprogressbar.h>
#include <qlayout.h>
#include <qtooltip.h>
#include <qwhatsthis.h>
#include <qimage.h>
#include <qpixmap.h>
#include <qstringlist.h>
#include <qsettings.h>
#include <qmessagebox.h>
#include <qfiledialog.h>
#include "util.h"
#include "isitap_globals.h"
#include "isitap_time.h"
#include "isiTapResults.h"
#include "configDlg.h"

static const char* const image0_data[] = { 
"31 31 2 1",
". c #0000ff",
"# c #ffff00",
"...............................",
"........##..........##.........",
"........##..........##.........",
"...............................",
"........##...####...##.........",
"........##..##..##..##.........",
"........##..##......##.........",
"........##...####...##.........",
"........##......##..##.........",
"........##..##..##..##.........",
"........##...####...##.........",
"...............................",
"..............#................",
"............###.#.##.#.........",
"...........######.##.##........",
"...........#########.##........",
".##################.###.#####..",
"...........#.#..###.#..#.......",
".............#..##..#..#.......",
".......##.......#..............",
".......##......................",
"......####..####...#####.......",
".......##..##..##..##..##......",
".......##....####..##..##......",
".......##...##.##..##..##......",
".......##..##..##..##..##......",
".......##..##..##..##..##......",
"........##..#####..#####.......",
"...................##..........",
"...................##..........",
"...................##.........."};

static const unsigned char image1_data[] = { 
    0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
    0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10,
    0x08, 0x06, 0x00, 0x00, 0x00, 0x1f, 0xf3, 0xff, 0x61, 0x00, 0x00, 0x00,
    0x3a, 0x49, 0x44, 0x41, 0x54, 0x78, 0x9c, 0x63, 0x64, 0x68, 0x6a, 0x61,
    0xa0, 0x04, 0xb0, 0x30, 0x30, 0x30, 0x30, 0x30, 0xd4, 0xd5, 0xfc, 0x27,
    0x4b, 0x77, 0x53, 0x0b, 0x23, 0x0b, 0x32, 0x87, 0x24, 0xcd, 0x50, 0x4b,
    0x99, 0xc8, 0xb2, 0x19, 0x09, 0x8c, 0x1a, 0x30, 0x6a, 0xc0, 0xe0, 0x30,
    0x00, 0x91, 0x17, 0xc8, 0xcc, 0x50, 0x8c, 0x94, 0x66, 0x67, 0x00, 0xee,
    0xdf, 0x0a, 0x2a, 0x7c, 0x5e, 0x83, 0xf4, 0x00, 0x00, 0x00, 0x00, 0x49,
    0x45, 0x4e, 0x44, 0xae, 0x42, 0x60, 0x82
};

static const unsigned char image2_data[] = { 
    0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
    0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10,
    0x08, 0x06, 0x00, 0x00, 0x00, 0x1f, 0xf3, 0xff, 0x61, 0x00, 0x00, 0x00,
    0x75, 0x49, 0x44, 0x41, 0x54, 0x78, 0x9c, 0xa5, 0x93, 0x4b, 0x0e, 0x40,
    0x11, 0x0c, 0x45, 0x6f, 0xc5, 0xb2, 0xc5, 0x40, 0xec, 0x9b, 0x91, 0x3c,
    0xa5, 0x1f, 0x0f, 0x43, 0x72, 0x4e, 0xeb, 0x36, 0x25, 0x94, 0x8a, 0x97,
    0x13, 0x01, 0x00, 0x39, 0xb5, 0x2b, 0xba, 0x54, 0x8a, 0xeb, 0xc5, 0x11,
    0x38, 0x15, 0x0c, 0x0c, 0x3e, 0xe9, 0x24, 0xa7, 0x36, 0x17, 0x0a, 0xec,
    0xd1, 0x93, 0x2c, 0xf0, 0x2e, 0xb0, 0x24, 0x02, 0x2c, 0x0b, 0x24, 0x89,
    0x02, 0x03, 0x63, 0x0a, 0x9e, 0xc4, 0x08, 0x57, 0xee, 0xe0, 0xc7, 0xd1,
    0x05, 0xa3, 0x6d, 0x27, 0x58, 0x59, 0xb0, 0xfe, 0xd9, 0x90, 0xec, 0x02,
    0x2d, 0x30, 0x45, 0xc2, 0x05, 0x46, 0xda, 0x9a, 0xe4, 0x13, 0x78, 0xb0,
    0x22, 0xe1, 0x63, 0xbc, 0x58, 0x2a, 0x7a, 0x5d, 0xe7, 0x0e, 0xdd, 0x52,
    0x44, 0x33, 0xd4, 0x28, 0x0e, 0xf6, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45,
    0x4e, 0x44, 0xae, 0x42, 0x60, 0x82
};

static const unsigned char image3_data[] = { 
    0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
    0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20,
    0x08, 0x06, 0x00, 0x00, 0x00, 0x73, 0x7a, 0x7a, 0xf4, 0x00, 0x00, 0x00,
    0x91, 0x49, 0x44, 0x41, 0x54, 0x78, 0x9c, 0xed, 0x95, 0xc1, 0x0a, 0xc0,
    0x30, 0x08, 0x43, 0x93, 0xb1, 0xff, 0xff, 0xe5, 0xec, 0xd4, 0x43, 0x3b,
    0x2d, 0x2b, 0x28, 0x2d, 0x4c, 0x4f, 0x3d, 0x14, 0xf3, 0x50, 0x43, 0x28,
    0x09, 0x3b, 0xeb, 0xda, 0xaa, 0x0e, 0xe0, 0x6e, 0x0f, 0x92, 0x4b, 0xa3,
    0x90, 0xc4, 0x50, 0x80, 0x95, 0xa6, 0xab, 0xb0, 0xb3, 0x7a, 0xad, 0x60,
    0xd6, 0x3c, 0x52, 0xd8, 0x05, 0x90, 0x44, 0x4b, 0x88, 0xa4, 0xa2, 0xc6,
    0x3e, 0x05, 0xb0, 0x20, 0xb2, 0xc4, 0x81, 0xe1, 0x06, 0x3c, 0x88, 0x2c,
    0x71, 0xe0, 0x00, 0x1b, 0xba, 0x00, 0x6d, 0xec, 0xde, 0x4d, 0xa4, 0x02,
    0x8c, 0x3b, 0xcf, 0x84, 0x30, 0x6d, 0x68, 0xed, 0x3c, 0x0b, 0xc2, 0xb4,
    0xa1, 0xf7, 0x39, 0xe3, 0x18, 0x3b, 0x17, 0x64, 0xee, 0xda, 0x2b, 0x56,
    0x1a, 0xb6, 0x47, 0xa5, 0xe1, 0x97, 0xe6, 0x95, 0x86, 0xd1, 0xe2, 0x40,
    0xa5, 0x61, 0xa5, 0x61, 0xa5, 0x61, 0xa5, 0xe1, 0xc9, 0x36, 0xfc, 0x0d,
    0xc0, 0x03, 0x9c, 0xbc, 0x89, 0x45, 0xe9, 0xd0, 0x45, 0x63, 0x00, 0x00,
    0x00, 0x00, 0x49, 0x45, 0x4e, 0x44, 0xae, 0x42, 0x60, 0x82
};

static const unsigned char image4_data[] = { 
    0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
    0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20,
    0x08, 0x06, 0x00, 0x00, 0x00, 0x73, 0x7a, 0x7a, 0xf4, 0x00, 0x00, 0x00,
    0x55, 0x49, 0x44, 0x41, 0x54, 0x78, 0x9c, 0xed, 0xd5, 0x31, 0x0a, 0x00,
    0x20, 0x0c, 0x43, 0xd1, 0x46, 0xbc, 0xff, 0x95, 0xe3, 0xe4, 0xe0, 0x22,
    0x16, 0x84, 0x2c, 0x3f, 0x53, 0x27, 0xfb, 0xb0, 0xd0, 0xca, 0x76, 0x25,
    0x33, 0xa2, 0xdd, 0xab, 0x6a, 0xee, 0x42, 0x52, 0xeb, 0x2b, 0x6c, 0xeb,
    0x2b, 0xa0, 0xf3, 0x68, 0x17, 0x7b, 0x4b, 0x7c, 0x04, 0x00, 0x00, 0x00,
    0x00, 0x70, 0x6c, 0xc2, 0x9f, 0x1b, 0xee, 0x35, 0xe2, 0x1a, 0xee, 0x82,
    0x6b, 0x98, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x70, 0x0d, 0xe3, 0x23, 0x00,
    0xb0, 0x00, 0x0a, 0x97, 0x1b, 0x45, 0xcd, 0x27, 0x57, 0xcd, 0x00, 0x00,
    0x00, 0x00, 0x49, 0x45, 0x4e, 0x44, 0xae, 0x42, 0x60, 0x82
};

static const unsigned char image5_data[] = { 
    0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
    0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20,
    0x08, 0x06, 0x00, 0x00, 0x00, 0x73, 0x7a, 0x7a, 0xf4, 0x00, 0x00, 0x01,
    0x2c, 0x49, 0x44, 0x41, 0x54, 0x78, 0x9c, 0xed, 0x96, 0x51, 0x0a, 0x83,
    0x30, 0x0c, 0x86, 0xff, 0x0e, 0x4f, 0x25, 0xec, 0x64, 0x2b, 0x3e, 0x94,
    0x7a, 0xb2, 0x81, 0xd7, 0xea, 0x1e, 0x34, 0x4e, 0xa3, 0x31, 0x6d, 0x5a,
    0x90, 0xc1, 0x02, 0x32, 0xa9, 0x6b, 0xbf, 0xaf, 0xa9, 0x6d, 0x74, 0x08,
    0x11, 0x77, 0xc6, 0xe3, 0x56, 0x7a, 0x53, 0x81, 0xe1, 0x95, 0xee, 0x15,
    0x30, 0x86, 0x4d, 0x80, 0x66, 0xcb, 0x67, 0xbd, 0x6d, 0xcf, 0xcc, 0x48,
    0xbe, 0x00, 0x87, 0x6e, 0x01, 0xc6, 0xf4, 0x2f, 0x91, 0x52, 0x93, 0x2b,
    0x44, 0xec, 0x7e, 0xf9, 0xbd, 0xd0, 0xd6, 0x21, 0x8c, 0xae, 0x38, 0x0b,
    0x14, 0x61, 0x74, 0xe2, 0x32, 0x9c, 0xfd, 0x9f, 0xf7, 0x85, 0xe5, 0x1d,
    0xb8, 0x12, 0xde, 0x3e, 0xe3, 0xf7, 0x74, 0x31, 0xa9, 0xce, 0x04, 0x2f,
    0xc9, 0xda, 0x95, 0x24, 0x5a, 0x6c, 0x43, 0x2d, 0x23, 0x8a, 0xac, 0xfb,
    0x1f, 0xc5, 0xbf, 0x2b, 0x30, 0xf8, 0x84, 0xc1, 0xd7, 0x1c, 0x40, 0x00,
    0x4a, 0x77, 0x01, 0x81, 0x01, 0x4c, 0xef, 0x09, 0x00, 0xd0, 0x3f, 0xfb,
    0x59, 0x22, 0x44, 0xd3, 0xce, 0xc8, 0x17, 0x58, 0xc0, 0x29, 0xcd, 0x3c,
    0xe7, 0x66, 0x5e, 0xad, 0x88, 0x2e, 0xc0, 0xc0, 0x14, 0xad, 0x44, 0x64,
    0x01, 0x01, 0xcc, 0xa3, 0x56, 0xe4, 0x28, 0x90, 0x09, 0x6e, 0x25, 0xf2,
    0x15, 0x30, 0x82, 0x29, 0x38, 0x98, 0x42, 0x13, 0x71, 0x00, 0xf8, 0x5b,
    0x8d, 0x12, 0x11, 0x09, 0x2c, 0x05, 0x8d, 0x4f, 0x22, 0xab, 0xc0, 0x89,
    0xf1, 0xa5, 0x88, 0x06, 0xa6, 0xfe, 0xda, 0xf3, 0x6e, 0x4d, 0xc9, 0xb2,
    0x04, 0xbc, 0x23, 0x81, 0xa4, 0x35, 0x96, 0x06, 0x8e, 0x4b, 0x8d, 0xe1,
    0xe3, 0xad, 0x19, 0xa0, 0x89, 0x1c, 0x8a, 0x11, 0x3b, 0xdd, 0x78, 0xc7,
    0x5c, 0x30, 0x0f, 0x3f, 0xf8, 0x7d, 0xc3, 0xba, 0x04, 0x52, 0x35, 0x14,
    0x44, 0x5a, 0x81, 0x29, 0xf4, 0x72, 0x6c, 0x14, 0xd1, 0xc0, 0xf9, 0x02,
    0x46, 0x11, 0x0d, 0x5c, 0x2e, 0xa0, 0x88, 0x94, 0x82, 0xed, 0x02, 0x82,
    0x48, 0x29, 0xb8, 0x5e, 0x80, 0x8b, 0x18, 0xcb, 0xf1, 0xed, 0xdf, 0x84,
    0x1f, 0x85, 0x4b, 0x14, 0xe5, 0x0d, 0x00, 0xe2, 0xc6, 0x00, 0x00, 0x00,
    0x00, 0x49, 0x45, 0x4e, 0x44, 0xae, 0x42, 0x60, 0x82
};

static const unsigned char image6_data[] = { 
    0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
    0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20,
    0x08, 0x06, 0x00, 0x00, 0x00, 0x73, 0x7a, 0x7a, 0xf4, 0x00, 0x00, 0x01,
    0xb4, 0x49, 0x44, 0x41, 0x54, 0x78, 0x9c, 0xed, 0x96, 0x4d, 0x92, 0x83,
    0x20, 0x10, 0x85, 0x1f, 0x53, 0x73, 0x29, 0xa9, 0xb8, 0x90, 0x6b, 0x49,
    0xb2, 0xb0, 0x98, 0x6b, 0xc1, 0xc2, 0x54, 0x7b, 0xac, 0x9e, 0x85, 0x36,
    0x51, 0x03, 0x6a, 0x12, 0x33, 0x66, 0x31, 0x6f, 0x45, 0x29, 0xe1, 0x7d,
    0xf6, 0x5f, 0x50, 0x68, 0x1c, 0x8e, 0xd4, 0xd7, 0xa1, 0xee, 0x9f, 0x00,
    0xf0, 0xfd, 0xcc, 0x8f, 0xa8, 0x32, 0x0c, 0x00, 0xc5, 0xa9, 0x88, 0xcf,
    0xba, 0x6b, 0x97, 0xdc, 0xab, 0x83, 0x57, 0xbb, 0x02, 0x50, 0x65, 0x58,
    0x8c, 0xc5, 0xb4, 0x38, 0x15, 0x59, 0x18, 0x07, 0xcb, 0x16, 0x2e, 0x0b,
    0xf1, 0x54, 0x04, 0xc4, 0x64, 0x0e, 0x92, 0x92, 0xa9, 0x08, 0x2e, 0xe8,
    0x2c, 0x84, 0x4a, 0x75, 0x81, 0x84, 0xf8, 0x55, 0xf9, 0xe0, 0x01, 0x00,
    0x16, 0x50, 0xb9, 0x48, 0x64, 0x23, 0xa0, 0x4b, 0x9f, 0x7c, 0xee, 0x9a,
    0xdb, 0xda, 0x5e, 0xec, 0xf0, 0xac, 0xff, 0x08, 0x53, 0x99, 0x9b, 0xe9,
    0xf0, 0x0e, 0x00, 0xa8, 0x25, 0xf6, 0x21, 0xed, 0xb3, 0x29, 0x05, 0xd4,
    0x9a, 0xbe, 0x98, 0x2e, 0x96, 0x01, 0x07, 0x0b, 0xc4, 0x75, 0x6f, 0x06,
    0x00, 0x16, 0xd4, 0xd2, 0xc4, 0x78, 0x30, 0x87, 0x2e, 0xf5, 0x04, 0x7c,
    0x13, 0x00, 0xb5, 0x26, 0xae, 0x75, 0xf0, 0x8a, 0x2a, 0xc3, 0x1a, 0x40,
    0x7d, 0xae, 0x61, 0xae, 0x1d, 0x63, 0x38, 0x98, 0x5a, 0xea, 0xf7, 0x94,
    0x53, 0xd3, 0xb9, 0x72, 0x35, 0xb0, 0x3a, 0x07, 0xc4, 0x5c, 0x42, 0xab,
    0x94, 0x8a, 0xc5, 0xe7, 0x1a, 0x07, 0x5d, 0xea, 0xb5, 0x23, 0x16, 0xb5,
    0x29, 0x05, 0x3e, 0xf8, 0x21, 0xb4, 0x2e, 0x42, 0x30, 0x73, 0xcc, 0xf7,
    0xdb, 0x01, 0x44, 0x92, 0x96, 0x71, 0xb8, 0x45, 0xae, 0x71, 0xf0, 0xc1,
    0xc7, 0x82, 0xdc, 0x05, 0xc0, 0x07, 0x0f, 0x07, 0xb0, 0xa9, 0x0c, 0xd0,
    0x38, 0xa5, 0x4b, 0xcd, 0x00, 0xc0, 0xcc, 0x77, 0xbd, 0x5f, 0x9f, 0xeb,
    0x7e, 0x36, 0x94, 0x1a, 0x3f, 0x00, 0x4c, 0xa2, 0x0e, 0x1e, 0x06, 0x90,
    0xea, 0x76, 0x8d, 0x03, 0x55, 0x86, 0x75, 0xd3, 0x17, 0x52, 0x77, 0xed,
    0x58, 0xd2, 0x42, 0x2d, 0xc5, 0x54, 0x88, 0xf9, 0x23, 0x5a, 0x04, 0xe8,
    0x43, 0x7e, 0xab, 0x76, 0x19, 0x50, 0x63, 0xf3, 0x57, 0xb5, 0xe9, 0xdf,
    0x70, 0x6e, 0x24, 0xe6, 0xaf, 0x76, 0x00, 0xf0, 0xc0, 0x24, 0x1c, 0xcf,
    0x85, 0xd4, 0xfb, 0xdd, 0x01, 0xe6, 0x86, 0x22, 0xc9, 0x37, 0xb5, 0x26,
    0xd9, 0x0d, 0xbb, 0x01, 0x00, 0xd3, 0xaf, 0xcc, 0x01, 0xbd, 0x15, 0xe0,
    0x5d, 0xa6, 0x9b, 0x00, 0xe6, 0x05, 0x36, 0x2f, 0xc4, 0x3d, 0x0a, 0x70,
    0x11, 0x60, 0xad, 0xc5, 0xf6, 0x68, 0x41, 0xe0, 0x23, 0x2f, 0xa5, 0x17,
    0xcb, 0xa9, 0xe0, 0x2e, 0xa5, 0x20, 0x35, 0xff, 0xb7, 0xa6, 0xe8, 0x1e,
    0xa0, 0xc9, 0x5e, 0x20, 0x79, 0x61, 0x1f, 0x17, 0x23, 0x43, 0xbb, 0x7c,
    0xce, 0x0a, 0x40, 0x46, 0xb7, 0x1b, 0xd1, 0xfd, 0xe1, 0x16, 0x50, 0x76,
    0x0c, 0xb8, 0xd1, 0x1c, 0xc8, 0x5c, 0x4a, 0xff, 0x52, 0x87, 0x17, 0xe1,
    0x3f, 0xc0, 0xe1, 0x00, 0xbf, 0xd5, 0x63, 0xde, 0x2a, 0x22, 0x79, 0x11,
    0xe4, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4e, 0x44, 0xae, 0x42, 0x60,
    0x82
};

static const unsigned char image7_data[] = { 
    0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
    0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20,
    0x08, 0x06, 0x00, 0x00, 0x00, 0x73, 0x7a, 0x7a, 0xf4, 0x00, 0x00, 0x00,
    0xc2, 0x49, 0x44, 0x41, 0x54, 0x78, 0x9c, 0xed, 0x96, 0x4b, 0x0a, 0xc3,
    0x30, 0x0c, 0x44, 0x9f, 0x4b, 0x4f, 0x15, 0xe8, 0xa2, 0x39, 0x97, 0xf1,
    0x22, 0xe8, 0x5c, 0xdd, 0x04, 0x7c, 0xad, 0x76, 0x15, 0x08, 0x38, 0xa4,
    0x92, 0x23, 0x50, 0x29, 0x9e, 0x75, 0xf0, 0xbc, 0xe8, 0xc7, 0x24, 0x16,
    0x21, 0x52, 0xb7, 0x50, 0xf7, 0x01, 0xf0, 0x0b, 0x00, 0xf7, 0x6f, 0x1f,
    0x08, 0xbc, 0xad, 0x8f, 0xe6, 0x92, 0x91, 0x45, 0xc8, 0x90, 0x2e, 0x03,
    0x00, 0xcc, 0xcf, 0x99, 0xe9, 0x31, 0xa9, 0xcc, 0xc5, 0xb8, 0x55, 0x2a,
    0x00, 0xed, 0xe3, 0xb9, 0x64, 0x93, 0xb9, 0x19, 0x00, 0x80, 0x0e, 0x93,
    0x33, 0xb9, 0x0e, 0xa1, 0x60, 0xaf, 0x42, 0xf8, 0x16, 0xb8, 0x02, 0xf4,
    0x34, 0xc7, 0xbd, 0x02, 0xd6, 0x2d, 0x08, 0x6f, 0x81, 0x69, 0x0b, 0xf6,
    0x03, 0x56, 0xd7, 0xca, 0x4b, 0x79, 0x1b, 0xce, 0x64, 0xaa, 0xc0, 0x56,
    0xde, 0xba, 0xd6, 0xcb, 0xc6, 0x5d, 0x00, 0x7b, 0x73, 0x8f, 0xbf, 0x87,
    0x8e, 0x43, 0xe4, 0x65, 0xbc, 0x69, 0x1c, 0xa2, 0xff, 0x3b, 0x44, 0xd6,
    0x0d, 0x09, 0x6f, 0x41, 0x6a, 0x62, 0x79, 0xc9, 0xe6, 0x04, 0xa4, 0xd6,
    0x22, 0x4d, 0x42, 0x6a, 0x01, 0xe8, 0x8b, 0x61, 0x1a, 0x1d, 0x45, 0xb4,
    0xc3, 0x3b, 0xa0, 0xc9, 0x72, 0x5e, 0x0a, 0x9f, 0x81, 0x01, 0x30, 0x00,
    0xc2, 0x01, 0x3e, 0x72, 0xce, 0x2b, 0x26, 0xa9, 0x7e, 0xa4, 0xf0, 0x00,
    0x00, 0x00, 0x00, 0x49, 0x45, 0x4e, 0x44, 0xae, 0x42, 0x60, 0x82
};

static const unsigned char image8_data[] = { 
    0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
    0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20,
    0x08, 0x06, 0x00, 0x00, 0x00, 0x73, 0x7a, 0x7a, 0xf4, 0x00, 0x00, 0x01,
    0x9b, 0x49, 0x44, 0x41, 0x54, 0x78, 0x9c, 0xc5, 0x97, 0x41, 0x72, 0x83,
    0x30, 0x0c, 0x45, 0x9f, 0x3a, 0xbd, 0x54, 0x98, 0x66, 0x11, 0xae, 0x05,
    0x61, 0xe1, 0x88, 0x6b, 0xc1, 0xa2, 0x99, 0xe4, 0x58, 0xea, 0x22, 0x90,
    0xe2, 0xc4, 0x01, 0xdb, 0xd0, 0xf4, 0xcd, 0x78, 0xb0, 0x31, 0xa0, 0x6f,
    0x59, 0x48, 0x20, 0x38, 0xe5, 0x3f, 0xf9, 0x9c, 0x9d, 0x6d, 0x6a, 0x33,
    0xb3, 0xd5, 0x46, 0x44, 0xe4, 0x77, 0xe0, 0x54, 0xa6, 0x73, 0x2f, 0x05,
    0x28, 0x58, 0x65, 0xc6, 0xf5, 0x7c, 0x5d, 0x2d, 0x40, 0x07, 0x2f, 0xd7,
    0x4d, 0xfd, 0x34, 0x37, 0xef, 0x81, 0x81, 0xae, 0xef, 0xb2, 0x0c, 0x57,
    0xc7, 0x6a, 0x71, 0x01, 0x51, 0x02, 0x42, 0xca, 0x97, 0xd0, 0xc8, 0xd8,
    0x8a, 0x12, 0x00, 0x3c, 0xed, 0x5d, 0x04, 0x51, 0xc1, 0x13, 0x2f, 0x60,
    0xa4, 0xa9, 0xc3, 0x0f, 0x4e, 0x17, 0x08, 0xc0, 0x47, 0xea, 0x0d, 0xea,
    0x14, 0x33, 0xf3, 0xda, 0x1a, 0xd2, 0x3d, 0x30, 0x20, 0xd2, 0x02, 0xd5,
    0x30, 0x32, 0x68, 0x30, 0x90, 0x64, 0x4f, 0x24, 0x7b, 0x60, 0x44, 0x1d,
    0x98, 0xf9, 0x2d, 0x87, 0x64, 0x01, 0x35, 0x88, 0x97, 0x58, 0x56, 0x92,
    0xe7, 0x81, 0xcc, 0x80, 0xdb, 0x4e, 0x00, 0xb7, 0xdc, 0x20, 0x22, 0x5e,
    0xcb, 0x21, 0x2a, 0x08, 0x87, 0xa4, 0xe2, 0xef, 0xf2, 0xeb, 0x44, 0x93,
    0x14, 0x0d, 0x51, 0x02, 0xaa, 0x63, 0xb5, 0x7c, 0x51, 0x26, 0x51, 0x02,
    0xb6, 0x28, 0x48, 0x23, 0x3a, 0xf1, 0x50, 0x0d, 0x22, 0x21, 0x57, 0x6a,
    0xa2, 0x1b, 0x63, 0xa8, 0x9b, 0xfa, 0x5e, 0x1f, 0xca, 0x43, 0x49, 0xb1,
    0x2f, 0xc0, 0xa9, 0xbc, 0xf4, 0x40, 0x4e, 0x01, 0x9a, 0x63, 0x6a, 0x7c,
    0x5a, 0x5d, 0x3d, 0x01, 0xd3, 0x95, 0xc7, 0x56, 0xb3, 0x14, 0x1e, 0x8d,
    0x3f, 0x09, 0x80, 0xbf, 0x0d, 0xb8, 0xf6, 0xd4, 0x3e, 0x9d, 0x0b, 0x6e,
    0xc1, 0x96, 0x41, 0xb7, 0x44, 0x76, 0x31, 0x82, 0xf8, 0x2f, 0xa5, 0xf2,
    0x50, 0xe6, 0x09, 0x28, 0xbe, 0x0a, 0x00, 0x2e, 0xe7, 0x4b, 0x70, 0x3e,
    0x36, 0x50, 0x2f, 0xdf, 0xe1, 0xfb, 0x17, 0x05, 0x70, 0x1a, 0x8e, 0x87,
    0xb4, 0x07, 0x77, 0x7d, 0x37, 0xbb, 0xea, 0x68, 0x01, 0x97, 0xc3, 0x6b,
    0xe5, 0x73, 0xc4, 0x1a, 0x87, 0x40, 0x31, 0x6a, 0x4f, 0x2d, 0x5d, 0xdf,
    0x51, 0xec, 0x0b, 0x76, 0x5f, 0xbb, 0xcd, 0xfa, 0xc5, 0xbe, 0xb8, 0xdb,
    0xf0, 0xb7, 0xce, 0x29, 0x38, 0x45, 0x9d, 0x9a, 0x99, 0x99, 0x3a, 0x35,
    0x60, 0xf3, 0xfe, 0x38, 0x06, 0x6c, 0xb4, 0x89, 0x53, 0x6e, 0xa9, 0x78,
    0xf8, 0x03, 0x6a, 0x4f, 0xad, 0x97, 0x32, 0xb7, 0xea, 0x7b, 0x2b, 0x7f,
    0xf8, 0x96, 0x10, 0x9c, 0x62, 0xc7, 0x6a, 0xf3, 0xdc, 0x3f, 0x72, 0x3d,
    0x5f, 0xe9, 0xfa, 0x2e, 0x68, 0x1c, 0x86, 0x20, 0x14, 0x91, 0xd9, 0x57,
    0x65, 0x0d, 0x73, 0xc6, 0xef, 0x02, 0x00, 0x2f, 0x48, 0xde, 0x49, 0xb0,
    0x1c, 0xbf, 0x93, 0x1f, 0x0e, 0x44, 0x09, 0xfe, 0x58, 0x2e, 0xd0, 0x17,
    0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4e, 0x44, 0xae, 0x42, 0x60, 0x82
};

static const unsigned char image9_data[] = { 
    0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
    0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20,
    0x08, 0x06, 0x00, 0x00, 0x00, 0x73, 0x7a, 0x7a, 0xf4, 0x00, 0x00, 0x00,
    0xf9, 0x49, 0x44, 0x41, 0x54, 0x78, 0x9c, 0xed, 0x97, 0x41, 0x0a, 0xc3,
    0x20, 0x10, 0x45, 0xbf, 0x25, 0x97, 0x8a, 0x34, 0x27, 0x4b, 0xe8, 0xa2,
    0xb4, 0xd7, 0xca, 0x26, 0xe0, 0xb5, 0xd2, 0x4d, 0x6b, 0x25, 0x8c, 0x3a,
    0x3a, 0x13, 0x85, 0xd2, 0xbf, 0x49, 0x88, 0xe1, 0xcf, 0x43, 0x3f, 0xc3,
    0x68, 0x70, 0x7f, 0xa0, 0xa7, 0x06, 0x00, 0xc0, 0x6d, 0xd9, 0xf7, 0x0e,
    0xc5, 0x9f, 0x1e, 0x20, 0xf8, 0xd0, 0x4a, 0xf3, 0xfb, 0x39, 0x1c, 0x17,
    0x96, 0xde, 0x00, 0x00, 0xe0, 0x36, 0x77, 0x6a, 0xf1, 0x75, 0xb2, 0xfe,
    0xfd, 0x22, 0x35, 0x1b, 0xaf, 0x23, 0x6c, 0x60, 0x58, 0xaa, 0x22, 0x00,
    0xaa, 0x98, 0x31, 0x46, 0x04, 0x45, 0x1e, 0x41, 0x4c, 0x54, 0x31, 0xea,
    0xb8, 0xa8, 0xff, 0x54, 0x00, 0xb8, 0xd9, 0x28, 0xc9, 0x90, 0x38, 0x03,
    0x00, 0xce, 0xcb, 0x80, 0x34, 0x60, 0x1c, 0x9f, 0x24, 0x40, 0xc9, 0x59,
    0xd6, 0xfa, 0x24, 0x33, 0xa0, 0xd5, 0x0f, 0x52, 0x3e, 0x2a, 0x19, 0x90,
    0x48, 0x15, 0xa0, 0x26, 0x2f, 0x51, 0x80, 0xd2, 0x00, 0xda, 0xc9, 0x26,
    0xb7, 0x3a, 0xe6, 0x17, 0xcd, 0x00, 0x27, 0x80, 0x47, 0x43, 0xaa, 0xc0,
    0x07, 0x2a, 0xe6, 0x17, 0x05, 0xe0, 0x04, 0xd0, 0x6d, 0xce, 0x17, 0xcd,
    0xfd, 0x1f, 0x5b, 0x17, 0x65, 0x20, 0xb7, 0xed, 0x1c, 0x55, 0x03, 0x68,
    0x14, 0xcf, 0x02, 0xa4, 0x82, 0x18, 0x16, 0xcf, 0x81, 0xfc, 0x3b, 0xe1,
    0xef, 0x74, 0x42, 0x6e, 0x73, 0x2a, 0x69, 0x62, 0x45, 0x00, 0xdc, 0xf1,
    0xab, 0xe9, 0x44, 0xc4, 0x1d, 0xd3, 0x54, 0x00, 0x28, 0x49, 0x83, 0x4a,
    0x02, 0xac, 0x0a, 0x53, 0x50, 0x15, 0xc0, 0x8c, 0xef, 0x8d, 0xa5, 0x39,
    0x40, 0xcb, 0x7b, 0x61, 0x28, 0xd3, 0xfb, 0x7a, 0xfe, 0x02, 0x11, 0x55,
    0x52, 0x5d, 0x6c, 0xe9, 0x0e, 0x02, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45,
    0x4e, 0x44, 0xae, 0x42, 0x60, 0x82
};
//images/blank.png
static const unsigned char image_blank_data[] =

{ 0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00,
 0x00, 0x0d, 0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x0a,
 0x00, 0x00, 0x00, 0x0a, 0x08, 0x03, 0x00, 0x00, 0x00, 0xba,
 0xec, 0x3f, 0x8f, 0x00, 0x00, 0x03, 0x00, 0x50, 0x4c, 0x54,
 0x45, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00,
 0x80, 0x80, 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x80, 0x00,
 0x80, 0x80, 0xc0, 0xc0, 0xc0, 0xc0, 0xdc, 0xc0, 0xa6, 0xca,
 0xf0, 0x40, 0x20, 0x00, 0x60, 0x20, 0x00, 0x80, 0x20, 0x00,
 0xa0, 0x20, 0x00, 0xc0, 0x20, 0x00, 0xe0, 0x20, 0x00, 0x00,
 0x40, 0x00, 0x20, 0x40, 0x00, 0x40, 0x40, 0x00, 0x60, 0x40,
 0x00, 0x80, 0x40, 0x00, 0xa0, 0x40, 0x00, 0xc0, 0x40, 0x00,
 0xe0, 0x40, 0x00, 0x00, 0x60, 0x00, 0x20, 0x60, 0x00, 0x40,
 0x60, 0x00, 0x60, 0x60, 0x00, 0x80, 0x60, 0x00, 0xa0, 0x60,
 0x00, 0xc0, 0x60, 0x00, 0xe0, 0x60, 0x00, 0x00, 0x80, 0x00,
 0x20, 0x80, 0x00, 0x40, 0x80, 0x00, 0x60, 0x80, 0x00, 0x80,
 0x80, 0x00, 0xa0, 0x80, 0x00, 0xc0, 0x80, 0x00, 0xe0, 0x80,
 0x00, 0x00, 0xa0, 0x00, 0x20, 0xa0, 0x00, 0x40, 0xa0, 0x00,
 0x60, 0xa0, 0x00, 0x80, 0xa0, 0x00, 0xa0, 0xa0, 0x00, 0xc0,
 0xa0, 0x00, 0xe0, 0xa0, 0x00, 0x00, 0xc0, 0x00, 0x20, 0xc0,
 0x00, 0x40, 0xc0, 0x00, 0x60, 0xc0, 0x00, 0x80, 0xc0, 0x00,
 0xa0, 0xc0, 0x00, 0xc0, 0xc0, 0x00, 0xe0, 0xc0, 0x00, 0x00,
 0xe0, 0x00, 0x20, 0xe0, 0x00, 0x40, 0xe0, 0x00, 0x60, 0xe0,
 0x00, 0x80, 0xe0, 0x00, 0xa0, 0xe0, 0x00, 0xc0, 0xe0, 0x00,
 0xe0, 0xe0, 0x00, 0x00, 0x00, 0x40, 0x20, 0x00, 0x40, 0x40,
 0x00, 0x40, 0x60, 0x00, 0x40, 0x80, 0x00, 0x40, 0xa0, 0x00,
 0x40, 0xc0, 0x00, 0x40, 0xe0, 0x00, 0x40, 0x00, 0x20, 0x40,
 0x20, 0x20, 0x40, 0x40, 0x20, 0x40, 0x60, 0x20, 0x40, 0x80,
 0x20, 0x40, 0xa0, 0x20, 0x40, 0xc0, 0x20, 0x40, 0xe0, 0x20,
 0x40, 0x00, 0x40, 0x40, 0x20, 0x40, 0x40, 0x40, 0x40, 0x40,
 0x60, 0x40, 0x40, 0x80, 0x40, 0x40, 0xa0, 0x40, 0x40, 0xc0,
 0x40, 0x40, 0xe0, 0x40, 0x40, 0x00, 0x60, 0x40, 0x20, 0x60,
 0x40, 0x40, 0x60, 0x40, 0x60, 0x60, 0x40, 0x80, 0x60, 0x40,
 0xa0, 0x60, 0x40, 0xc0, 0x60, 0x40, 0xe0, 0x60, 0x40, 0x00,
 0x80, 0x40, 0x20, 0x80, 0x40, 0x40, 0x80, 0x40, 0x60, 0x80,
 0x40, 0x80, 0x80, 0x40, 0xa0, 0x80, 0x40, 0xc0, 0x80, 0x40,
 0xe0, 0x80, 0x40, 0x00, 0xa0, 0x40, 0x20, 0xa0, 0x40, 0x40,
 0xa0, 0x40, 0x60, 0xa0, 0x40, 0x80, 0xa0, 0x40, 0xa0, 0xa0,
 0x40, 0xc0, 0xa0, 0x40, 0xe0, 0xa0, 0x40, 0x00, 0xc0, 0x40,
 0x20, 0xc0, 0x40, 0x40, 0xc0, 0x40, 0x60, 0xc0, 0x40, 0x80,
 0xc0, 0x40, 0xa0, 0xc0, 0x40, 0xc0, 0xc0, 0x40, 0xe0, 0xc0,
 0x40, 0x00, 0xe0, 0x40, 0x20, 0xe0, 0x40, 0x40, 0xe0, 0x40,
 0x60, 0xe0, 0x40, 0x80, 0xe0, 0x40, 0xa0, 0xe0, 0x40, 0xc0,
 0xe0, 0x40, 0xe0, 0xe0, 0x40, 0x00, 0x00, 0x80, 0x20, 0x00,
 0x80, 0x40, 0x00, 0x80, 0x60, 0x00, 0x80, 0x80, 0x00, 0x80,
 0xa0, 0x00, 0x80, 0xc0, 0x00, 0x80, 0xe0, 0x00, 0x80, 0x00,
 0x20, 0x80, 0x20, 0x20, 0x80, 0x40, 0x20, 0x80, 0x60, 0x20,
 0x80, 0x80, 0x20, 0x80, 0xa0, 0x20, 0x80, 0xc0, 0x20, 0x80,
 0xe0, 0x20, 0x80, 0x00, 0x40, 0x80, 0x20, 0x40, 0x80, 0x40,
 0x40, 0x80, 0x60, 0x40, 0x80, 0x80, 0x40, 0x80, 0xa0, 0x40,
 0x80, 0xc0, 0x40, 0x80, 0xe0, 0x40, 0x80, 0x00, 0x60, 0x80,
 0x20, 0x60, 0x80, 0x40, 0x60, 0x80, 0x60, 0x60, 0x80, 0x80,
 0x60, 0x80, 0xa0, 0x60, 0x80, 0xc0, 0x60, 0x80, 0xe0, 0x60,
 0x80, 0x00, 0x80, 0x80, 0x20, 0x80, 0x80, 0x40, 0x80, 0x80,
 0x60, 0x80, 0x80, 0x80, 0x80, 0x80, 0xa0, 0x80, 0x80, 0xc0,
 0x80, 0x80, 0xe0, 0x80, 0x80, 0x00, 0xa0, 0x80, 0x20, 0xa0,
 0x80, 0x40, 0xa0, 0x80, 0x60, 0xa0, 0x80, 0x80, 0xa0, 0x80,
 0xa0, 0xa0, 0x80, 0xc0, 0xa0, 0x80, 0xe0, 0xa0, 0x80, 0x00,
 0xc0, 0x80, 0x20, 0xc0, 0x80, 0x40, 0xc0, 0x80, 0x60, 0xc0,
 0x80, 0x80, 0xc0, 0x80, 0xa0, 0xc0, 0x80, 0xc0, 0xc0, 0x80,
 0xe0, 0xc0, 0x80, 0x00, 0xe0, 0x80, 0x20, 0xe0, 0x80, 0x40,
 0xe0, 0x80, 0x60, 0xe0, 0x80, 0x80, 0xe0, 0x80, 0xa0, 0xe0,
 0x80, 0xc0, 0xe0, 0x80, 0xe0, 0xe0, 0x80, 0x00, 0x00, 0xc0,
 0x20, 0x00, 0xc0, 0x40, 0x00, 0xc0, 0x60, 0x00, 0xc0, 0x80,
 0x00, 0xc0, 0xa0, 0x00, 0xc0, 0xc0, 0x00, 0xc0, 0xe0, 0x00,
 0xc0, 0x00, 0x20, 0xc0, 0x20, 0x20, 0xc0, 0x40, 0x20, 0xc0,
 0x60, 0x20, 0xc0, 0x80, 0x20, 0xc0, 0xa0, 0x20, 0xc0, 0xc0,
 0x20, 0xc0, 0xe0, 0x20, 0xc0, 0x00, 0x40, 0xc0, 0x20, 0x40,
 0xc0, 0x40, 0x40, 0xc0, 0x60, 0x40, 0xc0, 0x80, 0x40, 0xc0,
 0xa0, 0x40, 0xc0, 0xc0, 0x40, 0xc0, 0xe0, 0x40, 0xc0, 0x00,
 0x60, 0xc0, 0x20, 0x60, 0xc0, 0x40, 0x60, 0xc0, 0x60, 0x60,
 0xc0, 0x80, 0x60, 0xc0, 0xa0, 0x60, 0xc0, 0xc0, 0x60, 0xc0,
 0xe0, 0x60, 0xc0, 0x00, 0x80, 0xc0, 0x20, 0x80, 0xc0, 0x40,
 0x80, 0xc0, 0x60, 0x80, 0xc0, 0x80, 0x80, 0xc0, 0xa0, 0x80,
 0xc0, 0xc0, 0x80, 0xc0, 0xe0, 0x80, 0xc0, 0x00, 0xa0, 0xc0,
 0x20, 0xa0, 0xc0, 0x40, 0xa0, 0xc0, 0x60, 0xa0, 0xc0, 0x80,
 0xa0, 0xc0, 0xa0, 0xa0, 0xc0, 0xc0, 0xa0, 0xc0, 0xe0, 0xa0,
 0xc0, 0x00, 0xc0, 0xc0, 0x20, 0xc0, 0xc0, 0x40, 0xc0, 0xc0,
 0x60, 0xc0, 0xc0, 0x80, 0xc0, 0xc0, 0xa0, 0xc0, 0xc0, 0xff,
 0xfb, 0xf0, 0xa0, 0xa0, 0xa4, 0x80, 0x80, 0x80, 0xff, 0x00,
 0x00, 0x00, 0xff, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff,
 0xff, 0x00, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x58,
 0xd2, 0x34, 0x44, 0x00, 0x00, 0x01, 0x00, 0x74, 0x52, 0x4e,
 0x53, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x53, 0xf7, 0x07,
 0x25, 0x00, 0x00, 0x00, 0x09, 0x70, 0x48, 0x59, 0x73, 0x00,
 0x00, 0x0e, 0xc3, 0x00, 0x00, 0x0e, 0xc3, 0x01, 0xc7, 0x6f,
 0xa8, 0x64, 0x00, 0x00, 0x00, 0x0f, 0x49, 0x44, 0x41, 0x54,
 0x78, 0x9c, 0x63, 0xf8, 0x0f, 0x07, 0x0c, 0xb4, 0x67, 0x02,
 0x00, 0x68, 0x2d, 0x63, 0x9d, 0x01, 0xab, 0x85, 0x0e, 0x00,
 0x00, 0x00, 0x00, 0x49, 0x45, 0x4e, 0x44, 0xae, 0x42, 0x60,
 0x82
};


// images/flag.png
static const unsigned char image_flag_data[] = 
{ 0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00,
 0x00, 0x0d, 0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x0a,
 0x00, 0x00, 0x00, 0x0a, 0x08, 0x03, 0x00, 0x00, 0x00, 0xba,
 0xec, 0x3f, 0x8f, 0x00, 0x00, 0x03, 0x00, 0x50, 0x4c, 0x54,
 0x45, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00,
 0x80, 0x80, 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x80, 0x00,
 0x80, 0x80, 0xc0, 0xc0, 0xc0, 0xc0, 0xdc, 0xc0, 0xa6, 0xca,
 0xf0, 0x40, 0x20, 0x00, 0x60, 0x20, 0x00, 0x80, 0x20, 0x00,
 0xa0, 0x20, 0x00, 0xc0, 0x20, 0x00, 0xe0, 0x20, 0x00, 0x00,
 0x40, 0x00, 0x20, 0x40, 0x00, 0x40, 0x40, 0x00, 0x60, 0x40,
 0x00, 0x80, 0x40, 0x00, 0xa0, 0x40, 0x00, 0xc0, 0x40, 0x00,
 0xe0, 0x40, 0x00, 0x00, 0x60, 0x00, 0x20, 0x60, 0x00, 0x40,
 0x60, 0x00, 0x60, 0x60, 0x00, 0x80, 0x60, 0x00, 0xa0, 0x60,
 0x00, 0xc0, 0x60, 0x00, 0xe0, 0x60, 0x00, 0x00, 0x80, 0x00,
 0x20, 0x80, 0x00, 0x40, 0x80, 0x00, 0x60, 0x80, 0x00, 0x80,
 0x80, 0x00, 0xa0, 0x80, 0x00, 0xc0, 0x80, 0x00, 0xe0, 0x80,
 0x00, 0x00, 0xa0, 0x00, 0x20, 0xa0, 0x00, 0x40, 0xa0, 0x00,
 0x60, 0xa0, 0x00, 0x80, 0xa0, 0x00, 0xa0, 0xa0, 0x00, 0xc0,
 0xa0, 0x00, 0xe0, 0xa0, 0x00, 0x00, 0xc0, 0x00, 0x20, 0xc0,
 0x00, 0x40, 0xc0, 0x00, 0x60, 0xc0, 0x00, 0x80, 0xc0, 0x00,
 0xa0, 0xc0, 0x00, 0xc0, 0xc0, 0x00, 0xe0, 0xc0, 0x00, 0x00,
 0xe0, 0x00, 0x20, 0xe0, 0x00, 0x40, 0xe0, 0x00, 0x60, 0xe0,
 0x00, 0x80, 0xe0, 0x00, 0xa0, 0xe0, 0x00, 0xc0, 0xe0, 0x00,
 0xe0, 0xe0, 0x00, 0x00, 0x00, 0x40, 0x20, 0x00, 0x40, 0x40,
 0x00, 0x40, 0x60, 0x00, 0x40, 0x80, 0x00, 0x40, 0xa0, 0x00,
 0x40, 0xc0, 0x00, 0x40, 0xe0, 0x00, 0x40, 0x00, 0x20, 0x40,
 0x20, 0x20, 0x40, 0x40, 0x20, 0x40, 0x60, 0x20, 0x40, 0x80,
 0x20, 0x40, 0xa0, 0x20, 0x40, 0xc0, 0x20, 0x40, 0xe0, 0x20,
 0x40, 0x00, 0x40, 0x40, 0x20, 0x40, 0x40, 0x40, 0x40, 0x40,
 0x60, 0x40, 0x40, 0x80, 0x40, 0x40, 0xa0, 0x40, 0x40, 0xc0,
 0x40, 0x40, 0xe0, 0x40, 0x40, 0x00, 0x60, 0x40, 0x20, 0x60,
 0x40, 0x40, 0x60, 0x40, 0x60, 0x60, 0x40, 0x80, 0x60, 0x40,
 0xa0, 0x60, 0x40, 0xc0, 0x60, 0x40, 0xe0, 0x60, 0x40, 0x00,
 0x80, 0x40, 0x20, 0x80, 0x40, 0x40, 0x80, 0x40, 0x60, 0x80,
 0x40, 0x80, 0x80, 0x40, 0xa0, 0x80, 0x40, 0xc0, 0x80, 0x40,
 0xe0, 0x80, 0x40, 0x00, 0xa0, 0x40, 0x20, 0xa0, 0x40, 0x40,
 0xa0, 0x40, 0x60, 0xa0, 0x40, 0x80, 0xa0, 0x40, 0xa0, 0xa0,
 0x40, 0xc0, 0xa0, 0x40, 0xe0, 0xa0, 0x40, 0x00, 0xc0, 0x40,
 0x20, 0xc0, 0x40, 0x40, 0xc0, 0x40, 0x60, 0xc0, 0x40, 0x80,
 0xc0, 0x40, 0xa0, 0xc0, 0x40, 0xc0, 0xc0, 0x40, 0xe0, 0xc0,
 0x40, 0x00, 0xe0, 0x40, 0x20, 0xe0, 0x40, 0x40, 0xe0, 0x40,
 0x60, 0xe0, 0x40, 0x80, 0xe0, 0x40, 0xa0, 0xe0, 0x40, 0xc0,
 0xe0, 0x40, 0xe0, 0xe0, 0x40, 0x00, 0x00, 0x80, 0x20, 0x00,
 0x80, 0x40, 0x00, 0x80, 0x60, 0x00, 0x80, 0x80, 0x00, 0x80,
 0xa0, 0x00, 0x80, 0xc0, 0x00, 0x80, 0xe0, 0x00, 0x80, 0x00,
 0x20, 0x80, 0x20, 0x20, 0x80, 0x40, 0x20, 0x80, 0x60, 0x20,
 0x80, 0x80, 0x20, 0x80, 0xa0, 0x20, 0x80, 0xc0, 0x20, 0x80,
 0xe0, 0x20, 0x80, 0x00, 0x40, 0x80, 0x20, 0x40, 0x80, 0x40,
 0x40, 0x80, 0x60, 0x40, 0x80, 0x80, 0x40, 0x80, 0xa0, 0x40,
 0x80, 0xc0, 0x40, 0x80, 0xe0, 0x40, 0x80, 0x00, 0x60, 0x80,
 0x20, 0x60, 0x80, 0x40, 0x60, 0x80, 0x60, 0x60, 0x80, 0x80,
 0x60, 0x80, 0xa0, 0x60, 0x80, 0xc0, 0x60, 0x80, 0xe0, 0x60,
 0x80, 0x00, 0x80, 0x80, 0x20, 0x80, 0x80, 0x40, 0x80, 0x80,
 0x60, 0x80, 0x80, 0x80, 0x80, 0x80, 0xa0, 0x80, 0x80, 0xc0,
 0x80, 0x80, 0xe0, 0x80, 0x80, 0x00, 0xa0, 0x80, 0x20, 0xa0,
 0x80, 0x40, 0xa0, 0x80, 0x60, 0xa0, 0x80, 0x80, 0xa0, 0x80,
 0xa0, 0xa0, 0x80, 0xc0, 0xa0, 0x80, 0xe0, 0xa0, 0x80, 0x00,
 0xc0, 0x80, 0x20, 0xc0, 0x80, 0x40, 0xc0, 0x80, 0x60, 0xc0,
 0x80, 0x80, 0xc0, 0x80, 0xa0, 0xc0, 0x80, 0xc0, 0xc0, 0x80,
 0xe0, 0xc0, 0x80, 0x00, 0xe0, 0x80, 0x20, 0xe0, 0x80, 0x40,
 0xe0, 0x80, 0x60, 0xe0, 0x80, 0x80, 0xe0, 0x80, 0xa0, 0xe0,
 0x80, 0xc0, 0xe0, 0x80, 0xe0, 0xe0, 0x80, 0x00, 0x00, 0xc0,
 0x20, 0x00, 0xc0, 0x40, 0x00, 0xc0, 0x60, 0x00, 0xc0, 0x80,
 0x00, 0xc0, 0xa0, 0x00, 0xc0, 0xc0, 0x00, 0xc0, 0xe0, 0x00,
 0xc0, 0x00, 0x20, 0xc0, 0x20, 0x20, 0xc0, 0x40, 0x20, 0xc0,
 0x60, 0x20, 0xc0, 0x80, 0x20, 0xc0, 0xa0, 0x20, 0xc0, 0xc0,
 0x20, 0xc0, 0xe0, 0x20, 0xc0, 0x00, 0x40, 0xc0, 0x20, 0x40,
 0xc0, 0x40, 0x40, 0xc0, 0x60, 0x40, 0xc0, 0x80, 0x40, 0xc0,
 0xa0, 0x40, 0xc0, 0xc0, 0x40, 0xc0, 0xe0, 0x40, 0xc0, 0x00,
 0x60, 0xc0, 0x20, 0x60, 0xc0, 0x40, 0x60, 0xc0, 0x60, 0x60,
 0xc0, 0x80, 0x60, 0xc0, 0xa0, 0x60, 0xc0, 0xc0, 0x60, 0xc0,
 0xe0, 0x60, 0xc0, 0x00, 0x80, 0xc0, 0x20, 0x80, 0xc0, 0x40,
 0x80, 0xc0, 0x60, 0x80, 0xc0, 0x80, 0x80, 0xc0, 0xa0, 0x80,
 0xc0, 0xc0, 0x80, 0xc0, 0xe0, 0x80, 0xc0, 0x00, 0xa0, 0xc0,
 0x20, 0xa0, 0xc0, 0x40, 0xa0, 0xc0, 0x60, 0xa0, 0xc0, 0x80,
 0xa0, 0xc0, 0xa0, 0xa0, 0xc0, 0xc0, 0xa0, 0xc0, 0xe0, 0xa0,
 0xc0, 0x00, 0xc0, 0xc0, 0x20, 0xc0, 0xc0, 0x40, 0xc0, 0xc0,
 0x60, 0xc0, 0xc0, 0x80, 0xc0, 0xc0, 0xa0, 0xc0, 0xc0, 0xff,
 0xfb, 0xf0, 0xa0, 0xa0, 0xa4, 0x80, 0x80, 0x80, 0xff, 0x00,
 0x00, 0x00, 0xff, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff,
 0xff, 0x00, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x58,
 0xd2, 0x34, 0x44, 0x00, 0x00, 0x01, 0x00, 0x74, 0x52, 0x4e,
 0x53, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x53, 0xf7, 0x07,
 0x25, 0x00, 0x00, 0x00, 0x09, 0x70, 0x48, 0x59, 0x73, 0x00,
 0x00, 0x0e, 0xc3, 0x00, 0x00, 0x0e, 0xc3, 0x01, 0xc7, 0x6f,
 0xa8, 0x64, 0x00, 0x00, 0x00, 0x32, 0x49, 0x44, 0x41, 0x54,
 0x78, 0x9c, 0x6d, 0xcb, 0x41, 0x0a, 0x00, 0x30, 0x08, 0x03,
 0xc1, 0xe4, 0xff, 0x2f, 0xee, 0x69, 0x9b, 0x88, 0xa7, 0x52,
 0x51, 0x19, 0x51, 0x25, 0x41, 0xab, 0xfd, 0x24, 0xad, 0x06,
 0xc1, 0xb1, 0x1d, 0x94, 0x71, 0xcf, 0x60, 0xf6, 0x2c, 0xe7,
 0x8b, 0x1d, 0x3f, 0x44, 0x2f, 0x2f, 0xcb, 0x73, 0x42, 0x97,
 0xb6, 0x3a, 0xc1, 0xef, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45,
 0x4e, 0x44, 0xae, 0x42, 0x60, 0x82
};

/*
 *  Constructs a isiTapDlg as a child of 'parent', with the
 *  name 'name' and widget flags set to 'f'.
 *
 *  The dialog will by default be modeless, unless you set 'modal' to
 *  TRUE to construct a modal dialog.
 */
isiTapDlg::isiTapDlg( QWidget* parent, const char* name, bool modal, WFlags fl )
    : QDialog( parent, name, modal, fl ),
      image0( (const char **) image0_data )
{
	QHeader *header;
    QImage img;

	setSizeGripEnabled(true);

	RestoreParam();

    img.loadFromData( image1_data, sizeof( image1_data ), "PNG" );
    image1 = img;

	
//    img.loadFromData( image_flag_data, sizeof( image_flag_data ), "PNG" );
//    image1 = img;


    img.loadFromData( image2_data, sizeof( image2_data ), "PNG" );
    image2 = img;
    img.loadFromData( image3_data, sizeof( image3_data ), "PNG" );
    image3 = img;
    img.loadFromData( image4_data, sizeof( image4_data ), "PNG" );
    image4 = img;
    img.loadFromData( image5_data, sizeof( image5_data ), "PNG" );
    image5 = img;
    img.loadFromData( image6_data, sizeof( image6_data ), "PNG" );
    image6 = img;
    img.loadFromData( image7_data, sizeof( image7_data ), "PNG" );
    image7 = img;
    img.loadFromData( image8_data, sizeof( image8_data ), "PNG" );
    image8 = img;
    img.loadFromData( image9_data, sizeof( image9_data ), "PNG" );
    image9 = img;
    if ( !name )
	setName( "isiTapDlg" );
    setIcon( image0 );


	QVBoxLayout *VLayout0 = new QVBoxLayout( this, 0, 6, "VLayout0"); 
	QHBoxLayout *HLayout1 = new QHBoxLayout( VLayout0, 0,  "HLayout1"); 
	QVBoxLayout *VLayout1 = new QVBoxLayout( HLayout1, 0,  "VLayout1"); 
	QVBoxLayout *VLayout2 = new QVBoxLayout( HLayout1, 0,  "VLayout2"); 
	QVBoxLayout *VLayout3 = new QVBoxLayout( HLayout1, 0,  "VLayout3"); 
	QHBoxLayout *HLayout2 = new QHBoxLayout( VLayout0, 3,  "HLayout2"); 

/*	VLayout0->addItem(HLayout1);
	VLayout0->addItem(HLayout2);

	HLayout1->addItem(VLayout1);
	HLayout1->addItem(VLayout2);
	HLayout1->addItem(VLayout3);*/

    textLabel1 = new QLabel( this, "textLabel1" );
    textLabel1->setGeometry( QRect( 20, 350, 80, 20 ) );
	textLabel1->setAlignment(Qt::AlignVCenter|Qt::AlignRight);

    comboBox = new QComboBox( FALSE, this, "comboBox" );
    comboBox->setGeometry( QRect( 130, 350, 120, 20 ) );
    comboBox->setEditable( TRUE );

    groupBox1 = new QGroupBox( this, "groupBox1" );
    groupBox1->setGeometry( QRect( 0, 10, 150, 320 ) );
//	groupBox1->setColumnLayout(3,Qt::Vertical);

	VLayout1->addWidget(groupBox1);


    groupBox1->setColumnLayout(0, Qt::Vertical );
    groupBox1->layout()->setSpacing( 6 );
    groupBox1->layout()->setMargin( 11 );

	QVBoxLayout *VLayoutSta = new QVBoxLayout( groupBox1->layout(),1,"VLayoutSta" );//, 0, 6);//, "VLayoutSta"); 

    IDC_STA = new QTable( groupBox1, "IDC_STA" );
    IDC_STA->setGeometry( QRect( 10, 20, 131, 241 ) );
    IDC_STA->setNumRows( 0 );
    IDC_STA->setNumCols( 2 );

    IDC_STA->setSelectionMode( QTable::SingleRow );
	IDC_STA->verticalHeader()->hide();
	IDC_STA->setLeftMargin(0);


    header = IDC_STA->horizontalHeader();


    header->setLabel( 0, QObject::tr( "  " ), 10 );
    header->setLabel( 1, QObject::tr( "Station" ), 120 );

	IDC_STA->verticalHeader()->hide();
	IDC_STA->setLeftMargin(0);
	IDC_STA->setColumnWidth(0, 20);
	IDC_STA->setColumnWidth(1, 110);
	IDC_STA->setColumnReadOnly(0,TRUE);
	IDC_STA->setColumnReadOnly(1,TRUE);
	header->adjustHeaderSize();


    UnSelectAllStaButton = new QPushButton( groupBox1, "UnSelectAllStaButton" );
    UnSelectAllStaButton->setGeometry( QRect( 110, 270, 28, 28 ) );
    UnSelectAllStaButton->setPixmap( image1 );
    UnSelectAllStaButton->setFlat( TRUE );
	UnSelectAllStaButton->setCursor( QCursor( 13 ) );

    SelectAllStaButton = new QPushButton( groupBox1, "SelectAllStaButton" );
    SelectAllStaButton->setGeometry( QRect( 10, 270, 28, 28 ) );
    SelectAllStaButton->setPixmap( image2 );
    SelectAllStaButton->setFlat( TRUE );
	SelectAllStaButton->setCursor( QCursor( 13 ) );

	VLayoutSta->addWidget(IDC_STA);

	QHBoxLayout *HStaButtonLayout = new QHBoxLayout( VLayoutSta, 1,  "HLayout2"); 

	HStaButtonLayout->addWidget(SelectAllStaButton);
	HStaButtonLayout->addWidget(UnSelectAllStaButton);


    groupBox2 = new QGroupBox( this, "groupBox2" );
    groupBox2->setGeometry( QRect( 150, 11, 250, 320 ) );
    groupBox2->setFrameShadow( QGroupBox::Sunken );
	VLayout2->addWidget(groupBox2);

    groupBox2->setColumnLayout(0, Qt::Vertical );
    groupBox2->layout()->setSpacing( 6 );
    groupBox2->layout()->setMargin( 11 );

	QVBoxLayout *VLayoutStaChan = new QVBoxLayout( groupBox2->layout(),1,"VLayoutStaChan" );//, 0, 6);//, "VLayoutSta"); 

    pushButton4 = new QPushButton( groupBox2, "pushButton4" );
    pushButton4->setGeometry( QRect( 90, 250, 44, 44 ) );
    pushButton4->setCursor( QCursor( 13 ) );
    pushButton4->setPixmap( image3 );
    pushButton4->setFlat( TRUE );

    queryTimeButton = new QPushButton( groupBox2, "queryTimeButton" );
    queryTimeButton->setGeometry( QRect( 341, 341, 44, 44 ) );
    queryTimeButton->setCursor( QCursor( 13 ) );
    queryTimeButton->setPixmap( image9 );
    queryTimeButton->setFlat( TRUE );


    IDC_CHAN = new QTable( groupBox2, "IDC_CHAN" );
    IDC_CHAN->setGeometry( QRect( 10, 20, 230, 230 ) );
    IDC_CHAN->setNumRows( 0 );
    IDC_CHAN->setNumCols( 6 );

    IDC_CHAN->setSelectionMode( QTable::SingleRow );
	IDC_CHAN->verticalHeader()->hide();
	IDC_CHAN->setLeftMargin(0);
//	IDC_CHAN->setColumnReadOnly(0,TRUE);
	IDC_CHAN->setColumnReadOnly(1,TRUE);
	IDC_CHAN->setColumnReadOnly(2,TRUE);
	IDC_CHAN->setColumnReadOnly(3,TRUE);
	IDC_CHAN->setColumnReadOnly(4,TRUE);
	IDC_CHAN->setColumnReadOnly(5,TRUE);




    header = IDC_CHAN->horizontalHeader();
	header->setLabel( 0, QObject::tr( "Station" ), 75 );
    header->setLabel( 1, QObject::tr( "Channel" ), 75 );
	header->setLabel( 2, QObject::tr( "Lcode" ),   75 );
	header->setLabel( 3, QObject::tr( "SpS" ),     75 );
	header->setLabel( 4, QObject::tr( "Tbeg" ),    75 );
	header->setLabel( 5, QObject::tr( "Tend" ),    75 );

	header->adjustHeaderSize();



    resetButton = new QPushButton( groupBox2, "resetButton3" );
    resetButton->setGeometry( QRect( 40, 250, 44, 44 ) );
    resetButton->setCursor( QCursor( 13 ) );
    resetButton->setMouseTracking( TRUE );
    resetButton->setPixmap( image4 );
    resetButton->setToggleButton( FALSE );
    resetButton->setOn( FALSE );
    resetButton->setFlat( TRUE );

	VLayoutStaChan->addWidget(IDC_CHAN);
	
	QHBoxLayout *HStaChanButtonLayout = new QHBoxLayout( VLayoutStaChan, 1,  "HStaChanButtonLayout"); 

	HStaChanButtonLayout->addWidget(pushButton4);
	HStaChanButtonLayout->addWidget(resetButton);
	HStaChanButtonLayout->addWidget(queryTimeButton);



    groupBox3 = new QGroupBox( this, "groupBox3" );
	groupBox3->setColumnLayout(0, Qt::Vertical );
//    groupBox3->setGeometry( QRect( 400, 10, 170, 160 ) );
    groupBox3->layout()->setSpacing( 6 );
    groupBox3->layout()->setMargin( 11 );

	VLayout3->addWidget(groupBox3);

	QVBoxLayout *VLayoutTimeDate = new QVBoxLayout( groupBox3->layout(), 0,  "VLayoutTimeDate");

    timeFormattextLabel = new QLabel( groupBox3, "timeFormattextLabel" );
    timeFormattextLabel->setGeometry( QRect( 10, 20, 130, 20 ) );

    endTimeLabel = new QLabel( groupBox3, "endTimeLabel" );
    endTimeLabel->setGeometry( QRect( 10, 100, 150, 20 ) );
    startTimeLabel = new QLabel( groupBox3, "startTimeLabel" );
    startTimeLabel->setGeometry( QRect( 10, 40, 150, 20 ) );

    endTime = new DateTimeEdit( groupBox3, "endTime" );
    endTime->setGeometry( QRect( 10, 130, 150, 20 ) );
	endTime->SetFormat(0);

    startTime = new DateTimeEdit( groupBox3, "startTime" );
    startTime->setGeometry( QRect( 10, 70, 150, 20 ) );
	startTime->SetFormat(0);

	VLayoutTimeDate->addWidget(timeFormattextLabel);
	VLayoutTimeDate->addWidget(startTimeLabel);
	VLayoutTimeDate->addWidget(startTime);
	VLayoutTimeDate->addWidget(endTimeLabel);
	VLayoutTimeDate->addWidget(endTime);


    groupBox4 = new QGroupBox( this, "groupBox4" );
	groupBox4->setColumnLayout(0, Qt::Vertical );
    groupBox4->layout()->setSpacing( 6 );
    groupBox4->layout()->setMargin( 11 );

	VLayout3->addWidget(groupBox4);

    getDataButton = new QPushButton( groupBox4, "getDataButton" );
    getDataButton->setGeometry( QRect( 10, 20, 44, 44 ) );
    getDataButton->setCursor( QCursor( 13 ) );
    getDataButton->setPixmap( image5 );
    getDataButton->setFlat( TRUE );

    configButton = new QPushButton( groupBox4, "configButton" );
    configButton->setGeometry( QRect( 60, 20, 44, 44 ) );
    configButton->setCursor( QCursor( 13 ) );
    configButton->setPixmap( image6 );
    configButton->setFlat( TRUE );

    exitButton = new QPushButton( groupBox4, "exitButton" );
    exitButton->setGeometry( QRect( 110, 20, 44, 44 ) );
    exitButton->setCursor( QCursor( 13 ) );
    exitButton->setPixmap( image7 );
    exitButton->setFlat( TRUE );

	QHBoxLayout *HButtonLayout0 = new QHBoxLayout( groupBox4->layout(), 1,  "HStaChanButtonLayout"); 

	HButtonLayout0->addWidget(getDataButton);
	HButtonLayout0->addWidget(configButton);
	HButtonLayout0->addWidget(exitButton);


    queryButton = new QPushButton( this, "queryButton" );
    queryButton->setGeometry( QRect( 291, 341, 44, 44 ) );
    queryButton->setCursor( QCursor( 13 ) );
    queryButton->setMouseTracking( TRUE );
    queryButton->setPixmap( image8 );
    queryButton->setFlat( TRUE );
	queryButton->setDefault(TRUE);

    languageChange();
    resize( QSize(582, 390).expandedTo(minimumSizeHint()) );
    clearWState( WState_Polished );


	int yr, mnth, day, da,  hh,  mm,  ss, ms;
	util_tsplit(tbeg, &yr, &da, &hh, &mm, &ss, &ms);
	util_jdtomd(yr, da, &mnth, &day);
	startTime->SetDateTime(yr, mnth, day, hh,  mm,  ss);

	util_tsplit(tend, &yr, &da, &hh, &mm, &ss, &ms);
	util_jdtomd(yr, da, &mnth, &day);
	endTime->SetDateTime(yr, mnth, day, hh,  mm,  ss);


	HLayout2->addWidget(textLabel1);
	HLayout2->addWidget(comboBox);
	HLayout2->addWidget(queryButton);


	connect( queryTimeButton, SIGNAL( clicked() ), this,  SLOT(queryTimeButton_clicked())  );
    connect( queryButton, SIGNAL( clicked() ), this,  SLOT(queryButton_clicked())  );
	connect( exitButton, SIGNAL( clicked() ), this,  SLOT(exitButton_clicked())  );
	connect( getDataButton, SIGNAL( clicked() ), this,  SLOT(getDataButton_clicked())  );

	connect( resetButton, SIGNAL( clicked() ), this,  SLOT(resetButton_clicked())  );
	connect( configButton, SIGNAL( clicked() ), this,  SLOT(configButton_clicked())  );

//  clicked ( int row, int col, int button, const QPoint & mousePos ) 
	connect( IDC_STA, SIGNAL(  clicked ( int , int , int , const QPoint & )  ), this,  SLOT(OnClickStaListTableItem(int , int , int , const QPoint & ))  );
	connect( IDC_CHAN, SIGNAL(  valueChanged ( int , int ) ), this,  SLOT(OnClickChanListTableItem(int, int))  );
	connect( comboBox, SIGNAL( activated ( const QString & ) ), this,  SLOT(comboBox_selchange(const QString & ))  );

	connect( SelectAllStaButton, SIGNAL( clicked() ), this,  SLOT(SelectAllStaButton_clicked())  );
	connect( UnSelectAllStaButton, SIGNAL( clicked() ), this,  SLOT(UnSelectAllStaButton_clicked())  );

	connect( IDC_CHAN, SIGNAL( doubleClicked ( int , int , int , const QPoint &  )  ), this,  SLOT(OnDblClickChanListTableItem( int , int , int , const QPoint &  ))  );

	LoadServersList();
	NrtsInfo.LoadChannelListFromFile();
	LoadStaList();
	}

/*
 *  Destroys the object and frees any allocated resources
 */
isiTapDlg::~isiTapDlg()
	{
    // no need to delete child widgets, Qt does it all for us
	}


void isiTapDlg::OnDblClickChanListTableItem(int row, int col, int button, const QPoint & mousePos)
	{
	CNRTSSTAINFO *si;
	CNRTSCHANINFO *ci;

	if( !(col==4||col==5)) return;

	QString sSta, sChan, sLoc;
	sSta=IDC_CHAN->text(row, 0);
	sChan=IDC_CHAN->text(row, 1);
	sLoc=IDC_CHAN->text(row, 2);
	si = NrtsInfo.LookupStation(sSta);
	if(si!=NULL)
		{
		ci = si->LookupChannel(sChan, sLoc);
		if(ci==NULL) return;
		if(col==4)
			{
			SetStartTime(ci->dTstart);
			}
		if(col==5)
			{
			SetEndTime(ci->dTend);
			}

		}

	}




/*
 *  Sets the strings of the subwidgets using the current
 *  language.
 */
void isiTapDlg::languageChange()
	{
    setCaption( tr( "isi Tap" ) );
    setIconText( tr( "isi Tap" ) );
    textLabel1->setText( tr( "NRTS Server" ) );
    groupBox1->setTitle( tr( "Stations" ) );
    UnSelectAllStaButton->setText( QString::null );
    SelectAllStaButton->setText( QString::null );
    groupBox2->setTitle( tr( "Stations&&Channels" ) );
    pushButton4->setText( QString::null );
    QToolTip::add( pushButton4, tr( "Select channels with wildcards" ) );
    resetButton->setText( QString::null );
    QToolTip::add( resetButton, tr( "Clear" ) );
    groupBox3->setTitle( tr( "Time interval" ) );
//    timeFormattextLabel->setText( tr( "MM.DD.YY hour:min:sec" ) );
	SetTime();
    endTimeLabel->setText( tr( "End time" ) );
    startTimeLabel->setText( tr( "Start time" ) );
    groupBox4->setTitle( QString::null );
    getDataButton->setText( QString::null );
    QToolTip::add( getDataButton, tr( "Get data" ) );
    QToolTip::add( queryButton, tr( "Query server" ) );
    QToolTip::add( queryTimeButton, tr( "Update times" ) );
	QToolTip::add( exitButton, tr( "Exit" ) );
	QToolTip::add( configButton, tr( "Configure" ) );
	QToolTip::add( SelectAllStaButton, tr( "Select all station" ) );
	QToolTip::add( UnSelectAllStaButton, tr( "Unselect all station" ) );
	
	}

void isiTapDlg::LoadServersList()
    {
	QSettings settings;
	servers_list.clear();
	servers_list= settings.entryList("nrtsutil/config/isitap/servers");
	comboBox->insertStringList(servers_list);
    }
void isiTapDlg::configButton_clicked()
	{
	tend=GetEndTime();
	tbeg=GetStartTime();

	configDlg Dlg(this,0, TRUE, 0);
	if(Dlg.exec()==QDialog::Accepted)
		{
		SetTime();
		}
	}
void isiTapDlg::resetButton_clicked()
	{
	QString sSta, sChan, sLoc;
	QImage img;
	CNRTSSTAINFO *si;
	CNRTSCHANINFO *ci;
	QCheckTableItem * item;
	int nItems, i;

	nItems = IDC_CHAN->numRows();	
	for(i=0;i<nItems; ++i )
		{
		sSta=IDC_CHAN->text(i, 0);
		sChan=IDC_CHAN->text(i, 1);
		sLoc=IDC_CHAN->text(i, 2);
		si = NrtsInfo.LookupStation(sSta);
		if(si!=NULL)
			{
			ci = si->LookupChannel(sChan, sLoc);
			if(ci==NULL) continue;
			if(ci->bSelected)
				{
				ci->bSelected=FALSE;
				item = (QCheckTableItem *)IDC_CHAN->item(i, 0);
				item->setChecked(FALSE);  
				}
			}
		}


	nItems = IDC_STA->numRows();	
	for(i=0;i<nItems; ++i )
		{
		sSta=IDC_STA->text(i, 1);
		si = NrtsInfo.LookupStation(sSta);
		if(bHasSelectedChan(si))
			{
			img.loadFromData( image_flag_data, sizeof( image_flag_data), "PNG" );
			IDC_STA->setPixmap(i,0, img);
			}
		else
			{
			img.loadFromData( image_blank_data, sizeof( image_blank_data), "PNG" );
			IDC_STA->setPixmap(i,0, img);
			}

		}



	}

void isiTapDlg::getDataButton_clicked()
	{
	if(NumOfSelectedChan()<1)
		{
		QMessageBox::critical(this,"isiTap","No channel selected",QMessageBox::Ok,QMessageBox::NoButton);
		return;
		}

	tbeg=GetStartTime();
	tend=GetEndTime();

	if(tbeg<0)
		{
		QMessageBox::critical(this,"isiTap","Wrong time interval",QMessageBox::Ok,QMessageBox::NoButton);
		startTime->setFocus();
		return;
		}
	if(tend<0)
		{
		QMessageBox::critical(this,"isiTap","Wrong time interval",QMessageBox::Ok,QMessageBox::NoButton);
		endTime->setFocus();
		return;
		}
	if(tbeg>=tend)
		{
		QMessageBox::critical(this,"isiTap","Wrong time interval",QMessageBox::Ok,QMessageBox::NoButton);
		endTime->setFocus();
		return;
		}

	SaveParam();
	NrtsInfo.SaveChannelListToFile();

//	DisableAllDlgElements();

//	GetCurrentDirectory(sizeof(cCurrentDir),cCurrentDir);

	QFileDialog* fd = new QFileDialog( this, "Choose a file", TRUE );
    fd->addFilter( "wfdisc files (*.wfdisc)" );
	fd->setMode(QFileDialog::AnyFile);
	QString fileName;
    if ( fd->exec() == QDialog::Accepted )
		{
        fileName = fd->selectedFile();
		QString s = fileName.right(7);
		if(s.isEmpty() || (s.compare(".wfdisc")!=0))
			{
			fileName=fileName+".wfdisc";
			}
		wfdFilePath=fileName;
		int nIndex = wfdFilePath.findRev('/',-1);
		WfdiscDir=fileName.left(nIndex);
		qDebug(WfdiscDir);
		delete fd;
		}
	else
		{
		delete fd;
		return;
		}

	isiTapResults Dlg(this,0, TRUE, 0);
	Dlg.exec();

/*	QString s = QFileDialog::getSaveFileName(
                    wfdFilePath,
                    "wfdisc files (*.wfdisc)",
                    this,
                    "open file dialog",
                    "Choose a file" );*/
//	QString sDir = dirPath
/*	CFileDialog fdlg(FALSE,"wfdisc",NULL,OFN_HIDEREADONLY | OFN_OVERWRITEPROMPT,"wfdisc files|*.wfdisc||",this);
	
	fdlg.m_ofn.lpstrInitialDir=WfdiscDir;
	fdlg.m_ofn.lpstrTitle="Select .wfdisc file name";
	if(fdlg.DoModal()==IDCANCEL) 
		{
		EnableAllDlgElements();
		return;
		}

	wfdFilePath=fdlg.GetPathName();
	WfdiscDir=GetDirFromPath(wfdFilePath);*/




	}
void isiTapDlg::exitButton_clicked()
	{
	SaveParam();
	SaveServersList();
	NrtsInfo.SaveChannelListToFile();
	done(0);
	}
void isiTapDlg::queryButton_clicked()
	{
    QApplication::setOverrideCursor( QCursor(Qt::WaitCursor) );

	QString serv,cMsg;

	serv=comboBox->currentText();
	server=serv;

	if(NrtsInfo.LoadConfigFromServer()==1)
		{
		NrtsInfo.SaveChannelListToFile();
		LoadStaList();
		AddStringToServerList(server);
		}
	else
		{
		QApplication::restoreOverrideCursor();
		QMessageBox::critical(this,"isiTap","Load Config from NRTS server error",QMessageBox::Ok,QMessageBox::NoButton);
		return;
		}
	QApplication::restoreOverrideCursor();
	}

void isiTapDlg::comboBox_selchange(const QString & string)
	{
	queryButton_clicked();
	}
void isiTapDlg::RestoreParam() 
	{
	LoadGlobalParam();
	QSettings settings;
	tbeg	= settings.readDoubleEntry(PARAMPATH+"timebeg",0);
	tend	= settings.readDoubleEntry(PARAMPATH+"timeend",1);
	}
void isiTapDlg::SaveParam() 
	{
	QSettings settings;
	SaveGlobalParam();

	tbeg=GetStartTime();
	tend=GetEndTime();

	if(tbeg > 0.)
		{
		settings.writeEntry(PARAMPATH+"timebeg", tbeg);
		}
	if(tend > 0.)
		{
		settings.writeEntry(PARAMPATH+"timeend", tend);
		}


	}
void isiTapDlg::AddStringToServerList(const QString &cNew)
	{
	QStringList::iterator it;
//	comboBox->
    if(servers_list.find(cNew)==servers_list.end())
		{
		servers_list.append(cNew);
		comboBox->insertItem(cNew,0);
		SaveServersList();
//		m_combo.AddString(cNew);
//		servers_list.WriteList();
		}
    }
void isiTapDlg::SaveServersList()
	{

	QSettings settings;
	QStringList::iterator it;
	QStringList qsl;
	int i=1;
	QString s;
	s=comboBox->currentText();


	qsl= settings.entryList("nrtsutil/config/isitap/servers");
	for ( it = qsl.begin(); it != qsl.end(); ++it )
		{
		settings.removeEntry("nrtsutil/config/isitap/servers/"+*it);
		}

	settings.writeEntry("nrtsutil/config/isitap/servers/"+s,0);
	for ( it = servers_list.begin(); it != servers_list.end(); ++it )
		{
		if(s.compare(*it)==0) continue;
		settings.writeEntry("nrtsutil/config/isitap/servers/"+*it,i++);
		}
	}

void isiTapDlg::LoadStaList()
	{
	QCheckTableItem * item;
	char cSta[16];

/*	m_sta.DeleteAllItems();*/

	ClearChanList();
	while(IDC_STA->numRows()>0)
		{
		IDC_STA->removeRow(0);
		}

	CNRTSSTAINFO *si;
	int nRows = NrtsInfo.StaInfo.count();
	IDC_STA->setNumRows(nRows);
	int nRow = 0;
	for(si=NrtsInfo.StaInfo.first(); si; si=NrtsInfo.StaInfo.next())
		{

		strcpy(cSta,si->Sta.ascii());

		item = new QCheckTableItem( IDC_CHAN, cSta);
		if(si->bSelected) 	item->setChecked(TRUE);
		IDC_STA->setItem(nRow,   1, item);


		if(bHasSelectedChan(si))
			{
			QImage img;
			img.loadFromData( image_flag_data, sizeof( image_flag_data), "PNG" );
			IDC_STA->setPixmap(nRow,0, img);
			}
		else
			{
			
			QImage img;
			img.loadFromData( image_blank_data, sizeof( image_blank_data), "PNG" );
			IDC_STA->setPixmap(nRow,0, img);
			}
		nRow++;
/*
		m_sta.InsertItem(&lvi);
		if(bHasSelectedChan(cSta))
			{
			m_sta.SetItemState(i,0x2000,LVIS_STATEIMAGEMASK);
			}
		else
			{
			m_sta.SetItemState(i,0x1000,LVIS_STATEIMAGEMASK);
			}
*/
		}
	}
void isiTapDlg::LoadChanList(QString &sSta)
	{
	QString sTime;
	int nRow = 0;
	CNRTSSTAINFO *si;
	CNRTSCHANINFO *ci;

	QCheckTableItem * item;
	char cChan[16],cSpS[16], cLoc[16];

	
	for(si=NrtsInfo.StaInfo.first(); si; si=NrtsInfo.StaInfo.next())
		{
		if(sSta.compare(si->Sta)==0)
			{
			int nChan=si->ChanInfo.count();
//			IDC_CHAN->setNumRows(nChan);
			IDC_CHAN->insertRows(nRow, si->ChanInfo.count());
			for(ci=si->ChanInfo.first();ci; ci=si->ChanInfo.next())
				{
				strcpy(cChan, ci->Chan);
				if(ci->dSpS>0)
					{
					sprintf(cSpS,"%.2f",ci->dSpS);
					}
				else
					{
					sprintf(cSpS,"-");
					}
				strcpy(cLoc, ci->LCODE);
				
		item = new QCheckTableItem( IDC_CHAN, sSta);
		if(ci->bSelected) 	item->setChecked(TRUE);
		IDC_CHAN->setItem(nRow,   0, item);
		IDC_CHAN->setText(nRow,   1, cChan);
		IDC_CHAN->setText(nRow,   2, cLoc);
		IDC_CHAN->setText(nRow, 3, cSpS);

		if(ci->dTstart>0)
			{
			sTime= TimeToString(ci->dTstart, nTimeFormat);
			}
		else
			{
			sTime="";
			}
		IDC_CHAN->setText(nRow, 4, sTime);
		if(ci->dTend>0)
			{
			sTime = TimeToString(ci->dTend, nTimeFormat);
			}
		else
			{
			sTime="";
			}
		IDC_CHAN->setText(nRow, 5, sTime);






		nRow++;

/*				if(NrtsInfoX.StaInfo[i]->ChanInfo[j]->bSelected)
					{
					m_chan.SetItemState(j,0x2000,LVIS_STATEI
MAGEMASK);
					}
				else
					{
					m_chan.SetItemState(j,0x1000,LVIS_STATEIMAGEMASK);
					}*/

				}
			return;
			}
		}

	}
void isiTapDlg::OnClickStaListTableItem(int row, int col, int button, const QPoint & mousePos)
	{
//	int row=0;
//	int col=0;
	row = IDC_STA->currentRow();
	QCheckTableItem * item = (QCheckTableItem *)IDC_STA->item(row, 1);
	QString Sta=IDC_STA->text(row, 1);
	if(item->isChecked())
		{
		RemoveChanList(Sta);
		item->setChecked(false);
		}
	else
		{
		LoadChanList(Sta);
		item->setChecked(true);
		adjustTableColumnWidth();
		}
//	ActiveSta=Sta;
	}
void isiTapDlg::OnClickChanListTableItem(int row, int col)
	{
	QCheckTableItem * item = (QCheckTableItem *)IDC_CHAN->item(row, 0);
	QString Sta   = IDC_CHAN->text(row, 0);
	QString Chan  = IDC_CHAN->text(row, 1);
	QString LCODE = IDC_CHAN->text(row, 2);
	if(item->isChecked())
		{
		SetChanDrawState(Sta, Chan, LCODE, TRUE);
		}
	else
		{
		SetChanDrawState(Sta, Chan, LCODE, FALSE);
		}
//	ActiveSta=Sta;
	}
void isiTapDlg::SetChanDrawState(const QString &sSta, const QString &sChan, const QString &LCODE, BOOL bSelected)
	{
	CNRTSSTAINFO *si;
	CNRTSCHANINFO *ci;

	for(si=NrtsInfo.StaInfo.first(); si; si=NrtsInfo.StaInfo.next())
		{
		if(sSta.compare(si->Sta)==0)
			{
			for(ci=si->ChanInfo.first();ci; ci=si->ChanInfo.next())
				{
				if(sChan.compare(ci->Chan)==0)
					{
					if(LCODE.isEmpty()&&ci->LCODE.isEmpty())
						{
						ci->bSelected=bSelected;
						SetStationCheck(si);
						return;
						}
					else
						{
						if( (LCODE.compare(ci->LCODE)==0) &&
							(!ci->LCODE.isEmpty()))
							{
							ci->bSelected=bSelected;
							SetStationCheck(si);
							return;
							}
						}
					}
				}
			return;
			}
		}
	}
void isiTapDlg::SetStationCheck(CNRTSSTAINFO *si)
	{
	int i, nItems;
	QString Sta=si->Sta, qText;
	int row = -1;
	
	nItems = IDC_STA->numRows();
	for( i=0; i<nItems; ++i)
		{
		qText = IDC_STA->text(i, 1);
		if(qText.compare(Sta)==0)
			{
			row = i;
			break;
			}
		}

	if(row==-1) return;

	if(bHasSelectedChan(si))
		{
		QImage img;
		img.loadFromData( image_flag_data, sizeof( image_flag_data), "PNG" );
		IDC_STA->setPixmap(row,0, img);
		}
	else
		{
		QImage img;
		img.loadFromData( image_blank_data, sizeof( image_blank_data), "PNG" );
		IDC_STA->setPixmap(row,0, img);
		}
	}
BOOL isiTapDlg::bHasSelectedChan(const QString &sSta)
	{
	CNRTSSTAINFO *si;
	CNRTSCHANINFO *ci;

	for(si=NrtsInfo.StaInfo.first(); si; si=NrtsInfo.StaInfo.next())
		{
		if(sSta.compare(si->Sta)==0)
			{
			for(ci=si->ChanInfo.first();ci; ci=si->ChanInfo.next())
				{
				if(ci->bSelected) return TRUE;
				}
			}
		}
	return FALSE;
	}
BOOL isiTapDlg::bHasSelectedChan(CNRTSSTAINFO *si)
	{
	const CNRTSCHANINFO *ci;
	for(ci=si->ChanInfo.first();ci; ci=si->ChanInfo.next())
		{
		if(ci->bSelected) return TRUE;
		}
	return FALSE;
	}

void isiTapDlg::RemoveChanList(const QString &sSta)
	{
	IDC_CHAN->hide();
	int nItems = IDC_CHAN->numRows();	
	for(int i=nItems-1; i>=0; --i )
		{
		QString s=IDC_CHAN->text(i, 0);

		if(s.compare(sSta)==0)
			{
			IDC_CHAN->removeRow(i);
			continue;
			}
		}
	IDC_CHAN->show();
	}


void isiTapDlg::queryTimeButton_clicked()
	{
    QApplication::setOverrideCursor( QCursor(Qt::WaitCursor) );
	if(NrtsInfo.LoadTimeInfo()==1)
		{
		UpdateTimeInChanList();
		adjustTableColumnWidth();
		}
    QApplication::restoreOverrideCursor();
	}
void isiTapDlg::UpdateTimeInChanList()
	{
	QString sTime;
	QString sSta, sChan,sLoc;
	QString key,keych;
	CNRTSSTAINFO *si;
	CNRTSCHANINFO *ci;
	int nItems = IDC_CHAN->numRows();	
	for(int i=0;i<nItems; ++i )
		{
		sSta=IDC_CHAN->text(i, 0);
		sChan=IDC_CHAN->text(i, 1);
		sLoc=IDC_CHAN->text(i, 2);
		si = NrtsInfo.LookupStation(sSta);
		if(si!=NULL)
			{
			ci = si->LookupChannel(sChan, sLoc);
			if(ci==NULL) continue;
			}
		if(ci->dTstart>0)
			{
			sTime= TimeToString(ci->dTstart, nTimeFormat);
			}
		else
			{
			sTime="";
			}
		IDC_CHAN->setText(i, 4, sTime);
		if(ci->dTend>0)
			{
			sTime = TimeToString(ci->dTend, nTimeFormat);
			}
		else
			{
			sTime="";
			}
		IDC_CHAN->setText(i, 5, sTime);

		}


	}
void isiTapDlg::SetStartTime(double t)
	{
	int yr, mnth, day, da,  hh,  mm,  ss, ms;
	util_tsplit(t, &yr, &da, &hh, &mm, &ss, &ms);
	util_jdtomd(yr, da, &mnth, &day);
	startTime->SetDateTime(yr, mnth, day, hh,  mm,  ss);
	}
void isiTapDlg::SetEndTime(double t)
	{
	int yr, mnth, day, da,  hh,  mm,  ss, ms;
	util_tsplit(t, &yr, &da, &hh, &mm, &ss, &ms);
	util_jdtomd(yr, da, &mnth, &day);
	endTime->SetDateTime(yr, mnth, day, hh,  mm,  ss);
	}
double isiTapDlg::GetStartTime()
	{
	double t=0;
	int yr, mnth, day, da, hh, mm, ss;
	startTime->GetDateTime(yr, mnth, day, hh, mm, ss);
	da=util_ymdtojd(yr, mnth, day);
	t=util_ydhmsmtod(yr, da, hh, mm, ss, 0);
	return t;
	}
double isiTapDlg::GetEndTime()
	{
	double t=0;
	int yr, mnth, day, da, hh, mm, ss;
	endTime->GetDateTime(yr, mnth, day, hh, mm, ss);
	da=util_ymdtojd(yr, mnth, day);
	t=util_ydhmsmtod(yr, da, hh, mm, ss, 0);
	return t;
	}
void isiTapDlg::ClearChanList()
	{
	while(IDC_CHAN->numRows()>0)
		{
		IDC_CHAN->removeRow(0);
		}

	}
int isiTapDlg::NumOfSelectedChan()
	{
	int nSel=0;
	QString sTime;
	QString sSta, sChan,sLoc;
	CNRTSSTAINFO *si;
	CNRTSCHANINFO *ci;


	for(si=NrtsInfo.StaInfo.first(); si; si=NrtsInfo.StaInfo.next())
		{
		for(ci=si->ChanInfo.first();ci; ci=si->ChanInfo.next())
			{
			if(ci->bSelected)
				{
				++nSel;
				}

			}
		}
	return nSel;
	}
void isiTapDlg::SetTime()
	{

	switch(nTimeFormat)	
		{
		case 0:
			timeFormattextLabel->setText(tr("MM.DD.YYYY hour:min:sec"));
			break;
		case 1:
			timeFormattextLabel->setText(tr("YYYY.DDD-hour:min:sec"));
			break;
		case 2:
			timeFormattextLabel->setText(tr("hour:min:sec DD/MM/YYYY"));
			break;
		}
	startTime->SetFormat(nTimeFormat);
	endTime->SetFormat(nTimeFormat);

	int yr, mnth, day, da,  hh,  mm,  ss, ms;
	util_tsplit(tbeg, &yr, &da, &hh, &mm, &ss, &ms);
	util_jdtomd(yr, da, &mnth, &day);
	startTime->SetDateTime(yr, mnth, day, hh,  mm,  ss);

	util_tsplit(tend, &yr, &da, &hh, &mm, &ss, &ms);
	util_jdtomd(yr, da, &mnth, &day);
	endTime->SetDateTime(yr, mnth, day, hh,  mm,  ss);

	UpdateTimeInChanList();

	}
void isiTapDlg::SelectAllStaButton_clicked()
	{
	QString sSta;
	QCheckTableItem * item;
	int nItems = IDC_STA->numRows();
	int i;
	for(i=0;i<nItems; ++i )
		{
		sSta = IDC_STA->text(i, 1);
		item = (QCheckTableItem *)IDC_STA->item(i, 1);
		if(!item->isChecked())
			{
//			si = NrtsInfo.LookupStation(sSta);
			LoadChanList(sSta);
			item->setChecked(true);
			}

		}
	}

void isiTapDlg::UnSelectAllStaButton_clicked()
	{
	QString sSta;
	QCheckTableItem * item;
	int nItems = IDC_STA->numRows();	
	int i;
	for(i=0;i<nItems; ++i )
		{
		sSta = IDC_STA->text(i, 1);
		item = (QCheckTableItem *)IDC_STA->item(i, 1);
		if(item->isChecked())
			{
//			si = NrtsInfo.LookupStation(sSta);
			RemoveChanList(sSta);
			item->setChecked(false);
			}

		}
	}
void isiTapDlg::adjustTableColumnWidth()
	{
	QRect rc;
	QHeader *header;
	QString qText;
	int nColumn, nRow, nWidth, nWtd;
	int nRows = IDC_CHAN->numRows();
	header = IDC_CHAN->horizontalHeader();
	int nNumColumns = header->count();
	for(nColumn=0; nColumn<nNumColumns; ++nColumn)
		{
		qText = IDC_CHAN->text(0, nColumn); 
		GetTextRectangle(IDC_CHAN,qText, rc);
		nWidth = header->sectionSize(nColumn);
		for(nRow=1; nRow<nRows; ++nRow)
			{
			qText = IDC_CHAN->text(0, nColumn); 
			GetTextRectangle(IDC_CHAN,qText, rc);
			nWtd = rc.width()+4;
			if(nWidth < nWtd) nWidth = nWtd;
			}
		header->resizeSection(nColumn, nWidth);
		}
	}