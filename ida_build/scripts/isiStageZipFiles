#!/bin/csh
# $Id: isiStageZipFiles,v 1.6 2005/09/29 21:15:17 dechavez Exp $
#
# Move ISI tee files into ISO staging area

set debug  = 0
set myname = isiStageZipFiles

if ($debug) logger -t $myname"[$$]" -p user.info "begin"

# This only works if there is a "iso" subdir and we are
# sitting right above it.  Special check for runs from
# within ispd which is always one dir down.

if ($#argv > 0 && $argv[1] == "ViaIsp") then
    shift
    cd ..
endif

set StartingDir = `pwd`
set IsoDir = "$StartingDir/iso"
if (! -e $IsoDir) exit 0

# General setup

set setup  = ~nrts/scripts/ScriptSetup
if (! -e $setup ) then
    set message = "missing $setup"
    logger -t $myname"[$$]" -p user.info "$message"
    echo "${myname}: $message"
    goto failure
endif
source $setup

# Make sure ISO tree is complete

set ZipDir   = "$IsoDir/zip"
set StageDir = "$IsoDir/stage"
set DoneZips = "$IsoDir/done/gziped"
set DoneIsos = "$IsoDir/done/images"

set errors = 0
foreach dir ($ZipDir $StageDir $DoneZips $DoneIsos)
    if (! -d $dir) then
        set message = "Missing $dir"
        logger -t $myname"[$$]" -p user.info "$message"
        echo "${myname}: $message"
        set errors = 1
    endif
end

# Make required helper scripts exist

set isiCreateIsoImage = $NRTS_HOME/scripts/isiCreateIsoImage
set isiGenerateIsoLabel = $NRTS_HOME/scripts/isiGenerateIsoLabel
set isiIsoParameters = $IsoDir/config

foreach script ($isiCreateIsoImage $isiGenerateIsoLabel $isiIsoParameters)
    if (! -e $script) then
        set message = "Missing $script"
        logger -t $myname"[$$]" -p user.info "$message"
        echo "${myname}: $message"
        set errors = 1
    endif
end

set isiIsoNotify = $NRTS_HOME/scripts/isiIsoNotify

if ($errors != 0) goto failure

# Clean up old files

find $DoneZips -atime $DoneZipsFindValue -a -exec rm -f {} \;
find $DoneIsos -atime $DoneIsosFindValue -a -exec rm -f {} \;
find $IsoDir -name "*.iso" -mtime $IsoDirFindValue -a -exec rm -f {} \;

# PktRev, PktLen and DefaultMaxMbytes come from the config file

source $isiIsoParameters

# Command line setup

set Force = FALSE
if ($#argv == 1) then
    set StaName = `echo $argv[1] | ucase`
    set MaxMBytesPerArchive = $DefaultMaxMbytes
else if ($#argv == 2) then
    if ($argv[1] == FORCE) then
        set Force = TRUE
    else
        set MaxMBytesPerArchive = $argv[1]
    endif
    set StaName = `echo $argv[2] | ucase`
else
    echo "usage: $myname [ MaxMBytesPerArchive ] StaName"
    goto failure
endif

# If forcing an ISO image, then do it now

if ($Force == TRUE) then
    logger -t $myname"[$$]" -p user.info "begin (FORCE $StaName $PktRev $PktLen)"
    source $isiCreateIsoImage
    if ($status != 0) goto failure
    set count = `CountIsoImages iso`
    echo "$count ISO images ready to burn"
    goto success
else
    if ($MaxMBytesPerArchive == 0) set MaxMBytesPerArchive = $DefaultMaxMbytes
    @ MaxBytesPerArchive = $MaxMBytesPerArchive * 1024 * 1024
    set Force = FALSE
    if ($debug) logger -t $myname"[$$]" -p user.info "begin ($MaxMBytesPerArchive $StaName $PktRev $PktLen)"
endif

# Move zipped files into the staging area, building ISO images as needed

StartOfLoop:

    @ BytesUsed  = `du -sk $StageDir | awk '{print $1}'`
    @ BytesUsed *= 1024 # convert from K-bytes to bytes
    if ($BytesUsed > $MaxBytesPerArchive) then
        logger -t $myname"[$$]" -p user.info "WARNING: $StageDir is too full"
        source $isiCreateIsoImage
        goto StartOfLoop
    endif
    @ AvailSpace = $MaxBytesPerArchive - $BytesUsed

    # Move files from the zip directory to the staging directory

    if ($debug) logger -t $myname"[$$]" -p user.info "staging files from $ZipDir to $StageDir"
    set dummy = $ZipDir/Dummy.gz
    touch $dummy
    chmod 777 $dummy
    set CompressedFiles = `ls $ZipDir/*.gz`
    rm -f $dummy
    if ($status == 0) then
        foreach file ($CompressedFiles)
            if ($file == $dummy) continue
            @ FileSize = `wc -c $file | awk '{print $1}'`
            if ($FileSize > $AvailSpace) then
                logger -t $myname"[$$]" -p user.info "$StageDir is full"
                source $isiCreateIsoImage
                goto StartOfLoop
            else
                set command = "mv $file $StageDir"
                if ($debug) logger -t $myname"[$$]" -p user.info "$command"
                $command
                if ($status == 0) then
                    @ AvailSpace -= $FileSize
                    if ($AvailSpace <= 0) then
                        logger -t $myname"[$$]" -p user.info "$StageDir is full"
                        source $isiCreateIsoImage
                        goto StartOfLoop
                    endif
                else
                    logger -t $myname"[$$]" -p user.info "FAILED: $command"
                    goto failure
                endif
            endif
        end
    endif

# Normal exit

success:
pkill -HUP -x ispd
if ($debug) logger -t $myname"[$$]" -p user.info "completed OK"
exit 0

failure:
pkill -HUP -x ispd
logger -t $myname"[$$]" -p user.info "exit 1"
exit 1

# Revision History
#
# $Log: isiStageZipFiles,v $
# Revision 1.6  2005/09/29 21:15:17  dechavez
# kill exact names with pkill -x
#
# Revision 1.5  2005/09/27 21:49:19  dechavez
# HUP ispd on exit (to cause it to update the isp display stats)
#
# Revision 1.4  2005/09/15 17:06:50  dechavez
# don't complain if no iso dir is present, just quit quietly and successfully
#
# Revision 1.3  2005/09/11 03:24:20  dechavez
# print message with number of images ready with FORCE option used
#
# Revision 1.2  2005/08/26 20:26:50  dechavez
# added ViaIsp support
#
# Revision 1.1  2005/08/17 21:06:56  dechavez
# initial release
#
