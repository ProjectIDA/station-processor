#! /bin/bash 
#
#  Bring up/down isid daemon
#
#  description: 
# The isid program allows external users to collect data from 
# an ida disk loop. It is intended to replace the LISS functionality 
# and fulfill requests for near real-time data. 
# This application is launched with command-line parameters 
# that determine which ports it will listen on, for example:
# isid port=39136 log=/opt/data/nrts/log/isid.log -bd
# An isidl client on a remote machine provides the capability 
# to connect and query an isid server. 

PATH="/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin"
RETVAL=0
PROG=`basename $0`
SCRIPTPID=$$
numargs=$#

# source configuration file 
. /home/maint/config 

# Make sure binary exists
test -x /usr/local/sbin/isid || exit 0

# Now start the data collection process
start () {

    echo "Starting isid..." 
    isid port=39136 user=maint log=/opt/data/nrts/log/isid.log -bd
}


stop ()
{
    echo "Killing $PROG" 
    #while pidof $PROG > /dev/null
    #do
    #    pids=`pidof $PROG`
    #    killparent $pids
    #done
    pid=`ps -C isid --no-header |grep -v $SCRIPTPID | awk '{ print $1 }'`
    
    if [ "${pid}" != "" ]; then
       echo "First attempt at killing isid pid: $pid"
       kill -15 $pid
    else
       echo "No active pid...exiting"
       exit 
    fi

    for i in 1 2 3
    do
       # Per Frank wait two seconds,
       # check if it's still running
       # then send a second kill
       sleep 2;
       exe=`ps -p $pid -o comm --no-header`
       if [ "${exe}" != "" ] ; then
           kill -15 $pid
           echo "Trying again... Killing pid $pid"
       else
         continue 3 
       fi
    done

    logger "END isid"
}

# sends kill to the smallest pid in a list of pids
killparent()
{
# Only do something if arguments were passed in
if [[ $# > 0 ]] ; then

  best=$1
  shift
  # Process each argument
  while [[ $# > 0 ]]
  do
    #See if this pid is smaller
    if [[ $best > $1 ]] ; then
      #remember new smallest pid
      best=$1
    fi

    # Done processing current argument, get next one
    shift
  done

  kill -15 $best
  echo "First attempt at killing pid: $best"

  for i in 1 2 3
  do  
     # Per Frank wait two seconds,
     # check if it's still running
     # then send a second kill
     sleep 2;
     exe=`ps -p $best -o comm --no-header`
     if [ "${exe}" != "" ] ; then
         kill -15 $exe 
         echo "Trying again... Killing pid $best"
     else
        exit
     fi
  done

fi
}


case "$1" in

    start)
        start
	;;

    stop)
        stop
	;;

    restart|reload|force-reload)
        echo -n "Restarting $PROG: "
	stop 
        sleep 2
        start
        ;;

    *)
        echo "Usage: /etc/init.d/isid {start|stop|reload|force-reload|restart}"
        exit 1
esac

exit 0
