#!/bin/csh
# $Id: isp_push,v 1.1.1.1 2000/02/08 20:20:44 dec Exp $
#
# Deliver tee'd ISP files to a remote location via isp_push
#

set myname = isp_push

# Make sure no other instance of this script is currently running

if (-e /vmunix) then
    set psopts = "-ax"
else
    set psopts = "-ef"
endif

ps $psopts | fgrep $myname | fgrep -v fgrep | fgrep -v $$ | fgrep -v "sh -c" > /dev/null
if ($status == 0) exit 0

logger -t $myname"[$$]" -p user.info "begin"

if ($#argv == 5) then
    set RemoteHost = $argv[1]
    set RemotePath = $argv[2]
    set UserName   = $argv[3]
    set Password   = $argv[4]
    set MaxAge     = $argv[5]
else
    logger -t $myname"[$$]" -p user.info "incorrect command line: $argv"
    logger -t $myname"[$$]" -p user.info "ABORTED"
    goto done
endif

setenv NRTS_HOME /usr/nrts
setenv IRIS_HOME $NRTS_HOME
setenv IDA_DPATH $NRTS_HOME/etc

if (-e $NRTS_HOME/UNCONFIGURED) exit 0

set platformrc = $NRTS_HOME/.platform
if ( -e $platformrc ) then
    source $platformrc
else
    logger -t $myname"[$$]" -p user.info "error: missing $platformrc"
    logger -t $myname"[$$]" -p user.info "ABORTED"
    goto done
endif

set path = ($NRTS_HOME/bin/$platform $NRTS_HOME/scripts /usr/local/bin $path)
@ beg_time = `gmt raw`

set systems_file = $NRTS_HOME/etc/Systems
if ( -e $systems_file ) then
    set systems = `stripcat $systems_file`
else
    logger -t $myname"[$$]" -p user.info "error: missing $systems_file"
    logger -t $myname"[$$]" -p user.info "ABORTED"
    goto done
endif

# Loop over all the systems 

@ attempts = 0
@ failed   = 0
@ sent     = 0

foreach system ($systems)
    set teedir = $NRTS_HOME/$system/isp/tee
    if (! -e $teedir) continue
    cd $teedir # absolute path so we don't have to cd out later
    if ($status != 0) then
        logger -t $myname"[$$]" -p user.info "ERROR: CAN'T CD TO $teedir"
        continue
    endif
    logger -t $myname"[$$]" -p user.info "$teedir"
        
    # Delete all the old stuff right away

    find . -mtime $MaxAge -a -exec rm -f {} \;

    # Compress all the new stuff

    set raw_files = ????:???-??:00 > & /dev/null
    if ($status == 0) then
        foreach file ($raw_files)
            if (! -x $file) then
                set command = "compress $file"
                logger -t $myname"[$$]" -p user.info "$command"
                $command
                set exitstatus = $status
                if ($exitstatus != 0) then
                    logger -t $myname"[$$]" -p user.info "FAILED"
                endif
            endif
        end
    endif

    # (Try to) send all the compressed stuff

    set dummy = dummy.Z
    touch $dummy
    set compressed_files = *.Z > & /dev/null
    if ($status == 0) then
        foreach file ($compressed_files)
            if ($file == $dummy) continue
            @ attempts += 1
            set ftp_args = "$file"
            set ftp_args = "$ftp_args $RemoteHost"
            set ftp_args = "$ftp_args $RemotePath/$system"
            set ftp_args = "$ftp_args $UserName"
            set ftp_args = "$ftp_args $Password"
            set command = "ftp_file $ftp_args"
            logger -t $myname"[$$]" -p user.info "$command"
            $command
            set exitstatus = $status
            if ($exitstatus != 0) then
                logger -t $myname"[$$]" -p user.info "FAILED"
                @ failed += 1
            else
                set command = "rm -f $file"
                logger -t $myname"[$$]" -p user.info "$command"
                $command
                @ sent += 1
            endif
        end
    endif
    rm -f $dummy
end # foreach system loop

logger -t $myname"[$$]" -p user.info "$attempts files processed"

if ($sent != $attempts) then
    logger -t $myname"[$$]" -p user.info "$sent files sent OK"
    logger -t $myname"[$$]" -p user.info "$failed files failed to transfer"
endif

done:
@ end_time = `gmt raw`
@ elapsed  = $end_time - $beg_time
set elapsed_string = `etoh code=2 $elapsed`
logger -t $myname"[$$]" -p user.info "elapsed time = $elapsed_string"
exit 0

# Revision History
#
# $Log: isp_push,v $
# Revision 1.1.1.1  2000/02/08 20:20:44  dec
# import existing IDA/NRTS sources
#
